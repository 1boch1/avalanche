:mod:`avalanche.logging.text_logging`
=====================================

.. py:module:: avalanche.logging.text_logging


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.logging.text_logging.TextLogger



.. py:class:: TextLogger(file=sys.stdout)

   Bases: :class:`avalanche.logging.StrategyLogger`

   The base class for the strategy loggers.

   Strategy loggers will receive events, under the form of callback calls,
   from the :class:`EvaluationPlugin` carrying a reference to the strategy
   as well as the values emitted by the metrics.

   Child classes can implement the desired callbacks. An alternative, simpler,
   mechanism exists: child classes may instead implement the `log_metric`
   method which will be invoked with each received metric value.

   Implementing `log_metric` is not mutually exclusive with the callback
   implementation. Make sure, when implementing the callbacks, to call
   the proper super method.

   Text-based logger that logs metrics in a file.
   By default it prints to the standard output.

   :param file: destination file (default=sys.stdout).

   .. method:: log_metric(self, metric_value: MetricValue, callback: str) -> None

      Helper method that will be invoked each time a metric value will become
      available. To know from which callback the value originated, the
      callback parameter can be used.

      Implementing this method is a practical, non-exclusive, alternative the
      implementation of the single callbacks. See the class description for
      details and hints.

      :param metric_value: The value to be logged.
      :param callback: The callback (event) from which the metric value was
          obtained.
      :return: None


   .. method:: _val_to_str(self, m_val)


   .. method:: print_current_metrics(self)


   .. method:: before_training_step(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: before_eval_step(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_training_epoch(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_eval_step(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: before_training(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: before_eval(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_training(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_eval(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: _on_step_start(self, strategy: PluggableStrategy)



