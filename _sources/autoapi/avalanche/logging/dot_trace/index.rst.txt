:mod:`avalanche.logging.dot_trace`
==================================

.. py:module:: avalanche.logging.dot_trace


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.logging.dot_trace.DotTrace



.. py:class:: DotTrace(stdout=True, stderr=False, trace_file: Union[str, Path] = None, *, iterations_per_line: int = 50, lines_between_summaries: int = 4)

   Bases: :class:`avalanche.logging.StrategyLogger`

   The base class for the strategy loggers.

   Strategy loggers will receive events, under the form of callback calls,
   from the :class:`EvaluationPlugin` carrying a reference to the strategy
   as well as the values emitted by the metrics.

   Child classes can implement the desired callbacks. An alternative, simpler,
   mechanism exists: child classes may instead implement the `log_metric`
   method which will be invoked with each received metric value.

   Implementing `log_metric` is not mutually exclusive with the callback
   implementation. Make sure, when implementing the callbacks, to call
   the proper super method.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: _update_metrics(self, strategy: PluggableStrategy)


   .. method:: _new_line(self)


   .. method:: _message(self, msg: str)


   .. method:: _file_error(self, err, new_line=True)


   .. method:: after_training_iteration(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: after_test_iteration(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: before_training_step(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: before_test_step(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: before_training_epoch(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: after_training_epoch(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: after_test_step(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: before_training(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: before_test(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: after_training(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: after_test(self, strategy: PluggableStrategy, _metric_values, **kwargs)


   .. method:: _on_iteration(self, strategy: PluggableStrategy)


   .. method:: _on_step_start(self, strategy: PluggableStrategy)


   .. method:: _on_epoch_end(self, strategy: PluggableStrategy)


   .. method:: _on_phase_start(self, strategy: PluggableStrategy)


   .. method:: _on_phase_end(self, strategy: PluggableStrategy)



