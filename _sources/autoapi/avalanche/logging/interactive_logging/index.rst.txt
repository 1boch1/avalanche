:mod:`avalanche.logging.interactive_logging`
============================================

.. py:module:: avalanche.logging.interactive_logging


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.logging.interactive_logging.InteractiveLogger



.. py:class:: InteractiveLogger

   Bases: :class:`avalanche.logging.TextLogger`

   The base class for the strategy loggers.

   Strategy loggers will receive events, under the form of callback calls,
   from the :class:`EvaluationPlugin` carrying a reference to the strategy
   as well as the values emitted by the metrics.

   Child classes can implement the desired callbacks. An alternative, simpler,
   mechanism exists: child classes may instead implement the `log_metric`
   method which will be invoked with each received metric value.

   Implementing `log_metric` is not mutually exclusive with the callback
   implementation. Make sure, when implementing the callbacks, to call
   the proper super method.

   Logger for interactive output to the standard output. Shows a progress
   bar and prints metric values.

   .. method:: before_training_epoch(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_training_epoch(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: before_eval_exp(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_eval_exp(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_training_iteration(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: after_eval_iteration(self, strategy: PluggableStrategy, metric_values: List['MetricValue'], **kwargs)


   .. method:: _progress(self)
      :property:


   .. method:: _end_progress(self)



