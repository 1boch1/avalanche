:mod:`avalanche.training.utils.transform_dataset`
=================================================

.. py:module:: avalanche.training.utils.transform_dataset


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.utils.transform_dataset.TransformationDataset
   avalanche.training.utils.transform_dataset.TransformationSubset
   avalanche.training.utils.transform_dataset.TransformationTensorDataset



.. py:class:: TransformationDataset(dataset: IDatasetWithTargets[T_co], transform: Callable[[T_co], Any] = None, target_transform: Callable[[int], int] = None)

   Bases: :class:`DatasetWithTargets[T_co]`, :class:`Generic[T_co]`

   A Dataset that applies transformations before returning patterns/targets.
   Also, this Dataset supports slicing and advanced indexing.

   Creates a ``TransformationDataset`` instance.

   :param dataset: The dataset to decorate. Beware that
       TransformationDataset will not overwrite transformations already
       applied by this dataset.
   :param transform: A function/transform that takes in an PIL image and
       returns a transformed version.
   :param target_transform: A function/transform that takes in the target
       and transforms it.

   .. attribute:: transform
      

      A function/transform that takes in an PIL image and returns a 
      transformed version.


   .. attribute:: target_transform
      

      A function/transform that takes in the target and transforms it.


   .. attribute:: dataset
      :annotation: :IDatasetWithTargets[T_co]

      The original dataset.


   .. attribute:: targets
      :annotation: :Sequence[int]

      A sequence of ints describing the label of each pattern contained in the
      dataset.


   .. method:: __getitem__(self, idx)


   .. method:: __len__(self)


   .. method:: __get_single_item(self, idx: int)



.. py:class:: TransformationSubset(dataset: IDatasetWithTargets[T_co], indices: Sequence[int] = None, class_mapping: Sequence[int] = None, transform=None, target_transform=None)

   Bases: :class:`TransformationDataset[T_co]`

   A Dataset that behaves like a pytorch :class:`torch.utils.data.Subset`.
   This Dataset also supports transformations, slicing, advanced indexing,
   the targets field and class mapping.

   Creates a ``TransformationSubset`` instance.

   :param dataset: The whole dataset.
   :param indices: Indices in the whole set selected for subset. Can
       be None, which means that the whole dataset will be returned.
   :param class_mapping: A list that, for each possible target (Y) value,
       contains its corresponding remapped value. Can be None.
   :param transform: A function/transform that takes a pattern obtained
       from the dataset and returns a transformed version.
   :param target_transform: A function/transform that takes in the target
       and transforms it.


.. py:class:: TransformationTensorDataset(dataset_x: Sequence[T_co], dataset_y: Sequence[SupportsInt], transform=None, target_transform=None)

   Bases: :class:`TransformationDataset[T_co]`

   A Dataset that wraps existing ndarrays, Tensors, lists... to provide
   basic Dataset functionalities. Very similar to TensorDataset from PyTorch,
   this Dataset also supports transformations, slicing, advanced indexing and
   the targets field.

   Creates a ``TransformationTensorDataset`` instance.

   :param dataset_x: An sequence, Tensor or ndarray representing the X
       values of the patterns.
   :param dataset_y: An sequence, Tensor int or ndarray of integers
       representing the Y values of the patterns.
   :param transform: A function/transform that takes in a single element
       from the ``dataset_x`` sequence and returns a transformed version.
   :param target_transform: A function/transform that takes in the target
       and transforms it.


