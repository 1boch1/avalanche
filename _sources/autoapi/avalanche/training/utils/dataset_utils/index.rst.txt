:mod:`avalanche.training.utils.dataset_utils`
=============================================

.. py:module:: avalanche.training.utils.dataset_utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.utils.dataset_utils.IDataset
   avalanche.training.utils.dataset_utils.IDatasetWithTargets
   avalanche.training.utils.dataset_utils.IDatasetWithIntTargets
   avalanche.training.utils.dataset_utils.DatasetWithTargets
   avalanche.training.utils.dataset_utils.LazyClassMapping
   avalanche.training.utils.dataset_utils.LazyConcatTargets
   avalanche.training.utils.dataset_utils.LazyTargetsConversion
   avalanche.training.utils.dataset_utils.SubsetWithTargets
   avalanche.training.utils.dataset_utils.ConcatDatasetWithTargets
   avalanche.training.utils.dataset_utils.SequenceDataset



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.training.utils.dataset_utils.find_list_from_index
   avalanche.training.utils.dataset_utils.manage_advanced_indexing


.. py:class:: IDataset

   Bases: :class:`Protocol[T_co]`

   Protocol definition of a Dataset.

   Note: no __add__ method is defined.

   .. method:: __getitem__(self, index: int) -> Tuple[T_co, int]


   .. method:: __len__(self) -> int



.. py:class:: IDatasetWithTargets

   Bases: :class:`IDataset[T_co]`, :class:`typing.Protocol`

   Protocol definition of a Dataset that has a valid targets field (like the
   Datasets in the torchvision package).

   Note: no __add__ method is defined.

   Create and return a new object.  See help(type) for accurate signature.

   .. attribute:: targets
      :annotation: :Sequence[SupportsInt]

      A sequence of ints or a PyTorch Tensor or a NumPy ndarray describing the
      label of each pattern contained in the dataset.


   .. method:: __getitem__(self, index: int) -> Tuple[T_co, int]


   .. method:: __len__(self) -> int



.. py:class:: IDatasetWithIntTargets

   Bases: :class:`IDatasetWithTargets[T_co]`, :class:`typing.Protocol`

   Protocol definition of a Dataset that has a valid targets field (like the
   Datasets in the torchvision package) where the targets field is a sequence
   of native ints.

   Create and return a new object.  See help(type) for accurate signature.

   .. attribute:: targets
      :annotation: :Sequence[int]

      A sequence of ints describing the label of each pattern contained in the
      dataset.


   .. method:: __getitem__(self, index: int) -> Tuple[T_co, int]


   .. method:: __len__(self) -> int



.. py:class:: DatasetWithTargets

   Bases: :class:`IDatasetWithIntTargets[T_co]`, :class:`torch.utils.data.dataset.Dataset`

   Dataset that has a valid targets field (like the Datasets in the
   torchvision package) where the targets field is a sequence of native ints.

   The actual value of the targets field should be set by the child class.

   .. attribute:: targets
      :annotation: = []

      A sequence of ints describing the label of each pattern contained in the
      dataset.



.. py:class:: LazyClassMapping(targets: Sequence[SupportsInt], indices: Union[Sequence[int], None], mapping: Optional[Sequence[int]] = None)

   Bases: :class:`Sequence[int]`

   This class is used when in need of lazy populating a targets field whose
   elements need to be filtered out (when subsetting, see
   :class:`torch.utils.data.Subset`) and/or transformed (remapped). This will
   allow for a more efficient memory usage as the conversion is done on the fly
   instead of actually allocating a new targets list.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: __len__(self)


   .. method:: __getitem__(self, item_idx) -> int


   .. method:: __str__(self)

      Return str(self).



.. py:class:: LazyConcatTargets(targets_list: Sequence[Sequence[SupportsInt]])

   Bases: :class:`Sequence[int]`

   Defines a lazy targets concatenation.

   This class is used when in need of lazy populating a targets created
   as the concatenation of the targets field of multiple datasets.
   This will allow for a more efficient memory usage as the concatenation is
   done on the fly instead of actually allocating a new targets list.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: __len__(self)


   .. method:: __getitem__(self, item_idx) -> int


   .. method:: __str__(self)

      Return str(self).



.. py:class:: LazyTargetsConversion(targets: Sequence[SupportsInt])

   Bases: :class:`Sequence[int]`

   Defines a lazy conversion of targets defined in some other format.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: __len__(self)


   .. method:: __getitem__(self, item_idx) -> int


   .. method:: __str__(self)

      Return str(self).



.. py:class:: SubsetWithTargets(dataset: IDatasetWithTargets[T_co], indices: Union[Sequence[int], None], class_mapping: Optional[Sequence[int]] = None)

   Bases: :class:`DatasetWithTargets[T_co]`

   A Dataset that behaves like a PyTorch :class:`torch.utils.data.Subset`.
   However, this dataset also supports the targets field and class mapping.

   .. method:: __getitem__(self, idx)


   .. method:: __len__(self) -> int



.. py:class:: ConcatDatasetWithTargets(datasets: Sequence[IDatasetWithTargets[T_co]])

   Bases: :class:`DatasetWithTargets[T_co]`

   A Dataset that behaves like a PyTorch
   :class:`torch.utils.data.ConcatDataset`. However, this dataset also
   supports the targets field.

   .. method:: __getitem__(self, idx)


   .. method:: __len__(self) -> int



.. py:class:: SequenceDataset(dataset_x: Sequence[T_co], dataset_y: Sequence[SupportsInt])

   Bases: :class:`DatasetWithTargets[T_co]`

   A Dataset that wraps existing ndarrays, Tensors, lists... to provide
   basic Dataset functionalities. Very similar to TensorDataset.

   Creates a ``SequenceDataset`` instance.

   :param dataset_x: An sequence, Tensor or ndarray representing the X
       values of the patterns.
   :param dataset_y: An sequence, Tensor int or ndarray of integers
       representing the Y values of the patterns.

   .. method:: __getitem__(self, idx)


   .. method:: __len__(self) -> int



.. function:: find_list_from_index(pattern_idx: int, list_sizes: Sequence[int], max_size: int)


.. function:: manage_advanced_indexing(idx, single_element_getter, max_length)

   Utility function used to manage the advanced indexing and slicing.

   If more than a pattern is selected, the X and Y values will be merged
   in two separate torch Tensor objects using the stack operation.

   :param idx: Either an in, a slice object or a list (including ndarrays and
       torch Tensors) of indexes.
   :param single_element_getter: A callable used to obtain a single element
       given its int index.
   :param max_length: The maximum sequence length.
   :return: A tuple consisting of two tensors containing the X and Y values
       of the patterns addressed by the idx parameter.


