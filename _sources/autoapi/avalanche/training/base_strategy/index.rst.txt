:mod:`avalanche.training.base_strategy`
=======================================

.. py:module:: avalanche.training.base_strategy


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.base_strategy.BaseStrategy



.. py:class:: BaseStrategy(model: Module, optimizer: Optimizer, criterion, evaluation_protocol: Optional[EvalProtocol] = None, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = 1, device='cpu', plugins: Optional[Sequence[StrategyPlugin]] = None)

   BaseStrategy is the super class of all continual learning strategies.
   It implements a basic training loop and callback system that can be
   customized by child strategies. Additionally, it supports plugins,
   a mechanism to augment existing strategies with additional
   behavior (e.g. a memory buffer for replay).

   :param model: PyTorch model.
   :param optimizer: PyTorch optimizer.
   :param criterion: loss function.
   :param evaluation_protocol: evaluation plugin.
   :param train_mb_size: mini-batch size for training.
   :param train_epochs: number of training epochs.
   :param test_mb_size: mini-batch size for test.
   :param device: PyTorch device to run the model.
   :param plugins: (optional) list of StrategyPlugins.

   .. method:: update_optimizer(self, old_params, new_params, reset_state=True)

      Update the optimizer by substituting old_params with new_params.

      :param old_params: List of old trainable parameters.
      :param new_params: List of new trainable parameters.
      :param reset_state: Wheter to reset the optimizer's state.
          Defaults to True.
      :return:


   .. method:: add_new_params_to_optimizer(self, new_params)

      Add new parameters to the trainable parameters.

      :param new_params: list of trainable parameters


   .. method:: train(self, step_info: IStepInfo, **kwargs)

      Training loop.

      :param step_info: CL step information.
      :param kwargs: custom arguments.
      :return: train results from the evalution plugin.


   .. method:: test(self, step_list: Sequence[IStepInfo], **kwargs)

      Test the current model on a series of steps, as defined by test_part.

      :param step_info: CL step information.
      :param test_part: determines which steps to test on.
      :param kwargs: custom arguments.
      :return: evaluation plugin test results.


   .. method:: before_training(self, **kwargs)

      Called  after the dataset and data loader creation and
      before the training loop.


   .. method:: make_train_dataloader(self, num_workers=0, **kwargs)

      Called after the dataset instantiation. Initialize the data loader.
      :param num_workers:


   .. method:: make_test_dataloader(self, num_workers=0, **kwargs)

      Initialize the test data loader.
      :param num_workers:
      :param kwargs:
      :return:


   .. method:: adapt_train_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      :param kwargs:
      :return:


   .. method:: before_training_epoch(self, **kwargs)

      Called at the beginning of a new training epoch.
      :param kwargs:
      :return:


   .. method:: training_epoch(self, **kwargs)

      Training epoch.
      :param kwargs:
      :return:


   .. method:: before_training_iteration(self, **kwargs)


   .. method:: before_forward(self, **kwargs)


   .. method:: after_forward(self, **kwargs)


   .. method:: before_backward(self, **kwargs)


   .. method:: after_backward(self, **kwargs)


   .. method:: after_training_iteration(self, **kwargs)


   .. method:: before_update(self, **kwargs)


   .. method:: after_update(self, **kwargs)


   .. method:: after_training_epoch(self, **kwargs)


   .. method:: after_training(self, **kwargs)


   .. method:: before_test(self, **kwargs)


   .. method:: before_test_step(self, **kwargs)


   .. method:: adapt_test_dataset(self, **kwargs)


   .. method:: test_epoch(self, **kwargs)


   .. method:: after_test_step(self, **kwargs)


   .. method:: after_test(self, **kwargs)


   .. method:: before_test_iteration(self, **kwargs)


   .. method:: before_test_forward(self, **kwargs)


   .. method:: after_test_forward(self, **kwargs)


   .. method:: after_test_iteration(self, **kwargs)



