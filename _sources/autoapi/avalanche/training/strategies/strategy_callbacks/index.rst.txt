:mod:`avalanche.training.strategies.strategy_callbacks`
=======================================================

.. py:module:: avalanche.training.strategies.strategy_callbacks


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.strategy_callbacks.StrategyCallbacks



.. data:: CallbackResult
   

   

.. py:class:: StrategyCallbacks

   Bases: :class:`Generic[CallbackResult]`, :class:`abc.ABC`

   Base class for all classes dealing with strategy callbacks. Implements all
   the callbacks of the BaseStrategy with an empty function.
   Subclasses must override the desired callbacks.

   The main two direct subclasses are :class:`StrategyPlugin` and
   :class:`StrategyLogger`. The first defines a common interface for all
   plugins

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: before_training(self, *args, **kwargs) -> CallbackResult


   .. method:: before_training_step(self, *args, **kwargs) -> CallbackResult


   .. method:: adapt_train_dataset(self, *args, **kwargs) -> CallbackResult


   .. method:: before_training_epoch(self, *args, **kwargs) -> CallbackResult


   .. method:: before_training_iteration(self, *args, **kwargs) -> CallbackResult


   .. method:: before_forward(self, *args, **kwargs) -> CallbackResult


   .. method:: after_forward(self, *args, **kwargs) -> CallbackResult


   .. method:: before_backward(self, *args, **kwargs) -> CallbackResult


   .. method:: after_backward(self, *args, **kwargs) -> CallbackResult


   .. method:: after_training_iteration(self, *args, **kwargs) -> CallbackResult


   .. method:: before_update(self, *args, **kwargs) -> CallbackResult


   .. method:: after_update(self, *args, **kwargs) -> CallbackResult


   .. method:: after_training_epoch(self, *args, **kwargs) -> CallbackResult


   .. method:: after_training_step(self, *args, **kwargs) -> CallbackResult


   .. method:: after_training(self, *args, **kwargs) -> CallbackResult


   .. method:: before_test(self, *args, **kwargs) -> CallbackResult


   .. method:: adapt_test_dataset(self, *args, **kwargs) -> CallbackResult


   .. method:: before_test_step(self, *args, **kwargs) -> CallbackResult


   .. method:: after_test_step(self, *args, **kwargs) -> CallbackResult


   .. method:: after_test(self, *args, **kwargs) -> CallbackResult


   .. method:: before_test_iteration(self, *args, **kwargs) -> CallbackResult


   .. method:: before_test_forward(self, *args, **kwargs) -> CallbackResult


   .. method:: after_test_forward(self, *args, **kwargs) -> CallbackResult


   .. method:: after_test_iteration(self, *args, **kwargs) -> CallbackResult



