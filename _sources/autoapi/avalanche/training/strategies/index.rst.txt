:mod:`avalanche.training.strategies`
====================================

.. py:module:: avalanche.training.strategies


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base_strategy/index.rst
   joint_training/index.rst
   multi_task/index.rst
   strategies/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.BaseStrategy
   avalanche.training.strategies.JointTraining
   avalanche.training.strategies.Naive
   avalanche.training.strategies.CWRStar
   avalanche.training.strategies.Replay
   avalanche.training.strategies.GDumb
   avalanche.training.strategies.Cumulative
   avalanche.training.strategies.LwF
   avalanche.training.strategies.AGEM
   avalanche.training.strategies.GEM
   avalanche.training.strategies.EWC



.. py:class:: BaseStrategy(model: Module, optimizer: Optimizer, criterion, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = 1, device='cpu', plugins: Optional[Sequence['StrategyPlugin']] = None)

   BaseStrategy is the super class of all continual learning strategies.
   It implements a basic training loop and callback system that can be
   customized by child strategies. Additionally, it supports plugins,
   a mechanism to augment existing strategies with additional
   behavior (e.g. a memory buffer for replay).

   This strategy does not use task identities. See
   :class:MultiTaskStrategy: if you need them.

   :param model: PyTorch model.
   :param optimizer: PyTorch optimizer.
   :param criterion: loss function.
   :param train_mb_size: mini-batch size for training.
   :param train_epochs: number of training epochs.
   :param test_mb_size: mini-batch size for test.
   :param device: PyTorch device to run the model.
   :param plugins: (optional) list of StrategyPlugins.

   .. method:: is_testing(self)
      :property:


   .. method:: update_optimizer(self, old_params, new_params, reset_state=True)

      Update the optimizer by substituting old_params with new_params.

      :param old_params: List of old trainable parameters.
      :param new_params: List of new trainable parameters.
      :param reset_state: Wheter to reset the optimizer's state.
          Defaults to True.
      :return:


   .. method:: add_new_params_to_optimizer(self, new_params)

      Add new parameters to the trainable parameters.

      :param new_params: list of trainable parameters


   .. method:: train(self, step_infos: Union[IStepInfo, Sequence[IStepInfo]], **kwargs)

      Training loop. if step_infos is a single element trains on it.
      If it is a sequence, trains the model on each step in order.
      This is different from joint training on the entire stream.

      :param step_infos: single IStepInfo or sequence.


   .. method:: train_step(self, step_info: IStepInfo, **kwargs)

      Training loop over a single IStepInfo object.

      :param step_info: CL step information.
      :param kwargs: custom arguments.


   .. method:: test(self, step_list: Union[IStepInfo, Sequence[IStepInfo]], **kwargs)

      Test the current model on a series of steps, as defined by test_part.

      :param step_info: CL step information.
      :param test_part: determines which steps to test on.
      :param kwargs: custom arguments.


   .. method:: before_training_step(self, **kwargs)

      Called  after the dataset and data loader creation and
      before the training loop.


   .. method:: make_train_dataloader(self, num_workers=0, shuffle=True, **kwargs)

      Called after the dataset instantiation. Initialize the data loader.
      :param num_workers: number of thread workers for the data loading.
      :param shuffle: True if the data should be shuffled, False otherwise.


   .. method:: make_test_dataloader(self, num_workers=0, **kwargs)

      Initialize the test data loader.
      :param num_workers:
      :param kwargs:
      :return:


   .. method:: adapt_train_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      :param kwargs:
      :return:


   .. method:: before_training_epoch(self, **kwargs)

      Called at the beginning of a new training epoch.
      :param kwargs:
      :return:


   .. method:: training_epoch(self, **kwargs)

      Training epoch.
      :param kwargs:
      :return:


   .. method:: before_training(self, **kwargs)


   .. method:: after_training(self, **kwargs)


   .. method:: before_training_iteration(self, **kwargs)


   .. method:: before_forward(self, **kwargs)


   .. method:: after_forward(self, **kwargs)


   .. method:: before_backward(self, **kwargs)


   .. method:: after_backward(self, **kwargs)


   .. method:: after_training_iteration(self, **kwargs)


   .. method:: before_update(self, **kwargs)


   .. method:: after_update(self, **kwargs)


   .. method:: after_training_epoch(self, **kwargs)


   .. method:: after_training_step(self, **kwargs)


   .. method:: before_test(self, **kwargs)


   .. method:: before_test_step(self, **kwargs)


   .. method:: adapt_test_dataset(self, **kwargs)


   .. method:: test_epoch(self, **kwargs)


   .. method:: after_test_step(self, **kwargs)


   .. method:: after_test(self, **kwargs)


   .. method:: before_test_iteration(self, **kwargs)


   .. method:: before_test_forward(self, **kwargs)


   .. method:: after_test_forward(self, **kwargs)


   .. method:: after_test_iteration(self, **kwargs)



.. py:class:: JointTraining(model: Module, optimizer: Optimizer, criterion, classifier_field: str = 'classifier', train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = 1, device='cpu', plugins: Optional[Sequence[StrategyPlugin]] = None)

   JointStrategy is a super class for all the joint training strategies.
   This means that it is not a continual learning strategy but it can be
   used as an "offline" upper bound for them. This strategy takes in
   input an entire stream and learn from it one shot. It supports unique
   tasks (i.e. streams with a unique task label) or multiple tasks.

   :param model: PyTorch model.
   :param optimizer: PyTorch optimizer.
   :param criterion: loss function.
   :param classifier_field: (optional) to specify the name of output layer.
   :param train_mb_size: mini-batch size for training.
   :param train_epochs: number of training epochs.
   :param test_mb_size: mini-batch size for test.
   :param device: PyTorch device to run the model.
   :param plugins: (optional) list of StrategyPlugins.

   .. method:: is_testing(self)
      :property:


   .. method:: set_task_layer(self, task_label)

      Sets the correct task layer. Creates a new head for previously
      unseen tasks.

      :param task_label: the task label integer identifying the task.
      :return: None


   .. method:: create_task_layer(self, n_output_units: int, previous_task_layer=None)

      Creates a new task layer.

      By default, this method will create a new :class:`Linear` layer with
      n_output_units" output units. If  "previous_task_layer" is None,
      the name of the classifier field is used to retrieve the amount of
      input features.

      This method will also be used to create a new layer when expanding
      an existing task head.

      This method can be overridden by the user so that a layer different
      from :class:`Linear` can be created.

      :param n_output_units: The number of output units.
      :param previous_task_layer: If not None, the previously created layer
           for the same task.
      :return: The new layer.


   .. method:: train(self, step_infos: Sequence[IStepInfo], **kwargs)

      Training loop. it trains only on a sequence of steps (a stream).
      WARNING: Please take in mind that it trains on it "in parallel" not
      iteratively as in the BaseStrategy train method. This is the main
      difference from the JointTraining and BaseStrategy classes.

      :param step_infos: sequence of IStepInfo (a stream).
      :return:


   .. method:: make_train_dataloader(self, num_workers=0, shuffle=True, **kwargs)

      Called after the dataset instantiation. Initialize the data loader.
      :param num_workers: number of thread workers for the data laoding.
      :param shuffle: True if the data should be shuffled, False otherwise.


   .. method:: training_epoch(self, **kwargs)

      Training epoch. How does it work:
      1. From each the n data loader (one for task) we load a mini-batch.
      2. net forward with the right head accumlating gradients for all the n
      mini-batches.
      3. Update the gradient.
      1., 2. and 3. are repeated till all the data of each of the data
      loader have been processed at least once. If a data loader finishes
      his mini-batches, it starts again from the first mini-batch. This
      assumes that each task as roughly the same amount of data.

      :param kwargs: named arguments eventually passed to this method.
      :return: None.


   .. method:: add_new_params_to_optimizer(self, new_params)

      Add new parameters to the trainable parameters.

      :param new_params: list of trainable parameters


   .. method:: test(self, step_list: Union[IStepInfo, Sequence[IStepInfo]], **kwargs)

      Test the current model on a series of steps, as defined by test_part.

      :param step_info: CL step information.
      :param test_part: determines which steps to test on.
      :param kwargs: custom arguments.
      :return: evaluation plugin test results.


   .. method:: before_training_step(self, **kwargs)

      Called  after the dataset and data loader creation and
      before the training loop.


   .. method:: make_test_dataloader(self, num_workers=0, **kwargs)

      Initialize the test data loader.
      :param num_workers:
      :param kwargs:
      :return:


   .. method:: adapt_train_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      :param kwargs:
      :return:


   .. method:: before_training_epoch(self, **kwargs)

      Called at the beginning of a new training epoch.
      :param kwargs:
      :return:


   .. method:: before_training(self, **kwargs)


   .. method:: after_training(self, **kwargs)


   .. method:: before_training_iteration(self, **kwargs)


   .. method:: before_forward(self, **kwargs)


   .. method:: after_forward(self, **kwargs)


   .. method:: before_backward(self, **kwargs)


   .. method:: after_backward(self, **kwargs)


   .. method:: after_training_iteration(self, **kwargs)


   .. method:: before_update(self, **kwargs)


   .. method:: after_update(self, **kwargs)


   .. method:: after_training_epoch(self, **kwargs)


   .. method:: after_training_step(self, **kwargs)


   .. method:: before_test(self, **kwargs)


   .. method:: before_test_step(self, **kwargs)


   .. method:: adapt_test_dataset(self, **kwargs)


   .. method:: test_epoch(self, **kwargs)


   .. method:: after_test_step(self, **kwargs)


   .. method:: after_test(self, **kwargs)


   .. method:: before_test_iteration(self, **kwargs)


   .. method:: before_test_forward(self, **kwargs)


   .. method:: after_test_forward(self, **kwargs)


   .. method:: after_test_iteration(self, **kwargs)



.. py:class:: Naive(model: Module, optimizer: Optimizer, criterion, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[Sequence[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   The simplest (and least effective) Continual Learning strategy. Naive just
   incrementally fine tunes a single model without employing any method
   to contrast the catastrophic forgetting of previous knowledge.
   This strategy does not use task identities.

   Naive is easy to set up and its results are commonly used to show the worst
   performing baseline.

   Creates an instance of the Naive strategy.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: CWRStar(model: Module, optimizer: Optimizer, criterion, second_last_layer_name, num_classes=50, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   CWR* Strategy.
   This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param second_last_layer_name: name of the second to last layer
           (layer just before the classifier).
   :param num_classes: total number of classes.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: Replay(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Experience replay strategy. See ReplayPlugin for more details.
   This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param mem_size: replay buffer size.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: GDumb(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   GDumb strategy. See GDumbPlugin for more details.
   This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param mem_size: replay buffer size.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: Cumulative(model: Module, optimizer: Optimizer, criterion, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Cumulative strategy. At each step,
       train model with data from all previous steps and current step.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.

   .. method:: adapt_train_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      :param kwargs:
      :return:



.. py:class:: LwF(model: Module, optimizer: Optimizer, criterion, alpha: Union[float, Sequence[float]], temperature: float, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Learning without Forgetting strategy. 
       See LwF plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param alpha: distillation hyperparameter. It can be either a float
           number or a list containing alpha for each step.
   :param temperature: softmax temperature for distillation
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: AGEM(model: Module, optimizer: Optimizer, criterion, patterns_per_step: int, sample_size: int = 64, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Average Gradient Episodic Memory (A-GEM) strategy. 
       See AGEM plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param patterns_per_step: number of patterns per step in the memory
   :param sample_size: number of patterns in memory sample when computing
       reference gradient.        
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: GEM(model: Module, optimizer: Optimizer, criterion, patterns_per_step: int, memory_strength: float = 0.5, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Gradient Episodic Memory (GEM) strategy. 
       See GEM plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param patterns_per_step: number of patterns per step in the memory
   :param memory_strength: offset to add to the projection direction
       in order to favour backward transfer (gamma in original paper).
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: EWC(model: Module, optimizer: Optimizer, criterion, ewc_lambda: float, mode: str = 'standard', decay_factor: Optional[float] = None, keep_importance_data: bool = False, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Elastic Weight Consolidation (EWC) strategy.
       See EWC plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param ewc_lambda: hyperparameter to weigh the penalty inside the total
          loss. The larger the lambda, the larger the regularization.
   :param mode: `standard` to keep a separate penalty for each previous 
          step. `onlinesum` to keep a single penalty summed over all
          previous tasks. `onlineweightedsum` to keep a single penalty
          summed with a decay factor over all previous tasks.
   :param decay_factor: used only if mode is `onlineweightedsum`. 
          It specify the decay term of the importance matrix.
   :param keep_importance_data: if True, keep in memory both parameter
           values and importances for all previous task, for all modes.
           If False, keep only last parameter values and importances.
           If mode is `separate`, the value of `keep_importance_data` is
           set to be True.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


