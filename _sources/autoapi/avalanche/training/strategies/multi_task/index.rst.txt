:mod:`avalanche.training.strategies.multi_task`
===============================================

.. py:module:: avalanche.training.strategies.multi_task


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.multi_task.MultiTaskStrategy



.. py:class:: MultiTaskStrategy(model: Module, optimizer: Optimizer, criterion, known_train_labels: bool = True, known_test_labels: bool = True, **kwargs)

   Bases: :class:`avalanche.training.strategies.BaseStrategy`

   MultiTaskStrategy is a CL strategy that provides task identities at
   train and test time (if needed).

   The main difference with :class:`BaseStrategy` is the use of task
   identities. See :class:`BaseStrategy` for additional documentation
   and constructor arguments. MultiTaskStrategy uses a
   :class:`MultiTaskDataLoader`, see its documentation for details
   about data loading order.

   :param known_train_labels: determines if labels are available
       at train time.
   :param known_test_labels: determines if labels are available
       at test time.
   :param **kwargs: See :class:`BaseStrategy`

   .. method:: adapt_train_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      multi-task datasets are dictionaries with task ids as keys
      and TransformationDatasets as values.
      :param kwargs:
      :return:


   .. method:: make_train_dataloader(self, num_workers=0, shuffle=True, **kwargs)

      Called after the dataset instantiation. Initialize the data loader.
      :param num_workers: number of thread workers for the data laoding.
      :param shuffle: True if the data should be shuffled, False otherwise.


   .. method:: adapt_test_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      multi-task datasets are dictionaries with task ids as keys
      and TransformationDatasets as values.
      :param kwargs:
      :return:


   .. method:: make_test_dataloader(self, num_workers=0, **kwargs)

      Initialize the test data loader.
      :param num_workers:
      :param kwargs:
      :return:


   .. method:: training_epoch(self, **kwargs)

      Training epoch.
      :param kwargs:
      :return:


   .. method:: test_epoch(self, **kwargs)



