:mod:`avalanche.training.strategies.cumulative`
===============================================

.. py:module:: avalanche.training.strategies.cumulative


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.cumulative.Cumulative



.. py:class:: Cumulative(model: Module, optimizer: Optimizer, criterion, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.BaseStrategy`

   Cumulative strategy. At each experience,
       train model with data from all previous experiences and current
       experience.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.

   .. method:: adapt_train_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      :param kwargs:
      :return:



