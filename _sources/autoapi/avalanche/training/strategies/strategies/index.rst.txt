:mod:`avalanche.training.strategies.strategies`
===============================================

.. py:module:: avalanche.training.strategies.strategies


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.strategies.Naive
   avalanche.training.strategies.strategies.CWRStar
   avalanche.training.strategies.strategies.Replay
   avalanche.training.strategies.strategies.GDumb
   avalanche.training.strategies.strategies.Cumulative



.. py:class:: Naive(model: Module, optimizer: Optimizer, criterion, evaluation_protocol: Optional[EvalProtocol] = None, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[Sequence[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   The simplest (and least effective) Continual Learning strategy. Naive just
   incrementally fine tunes a single model without employing any method
   to contrast the catastrophic forgetting of previous knowledge.

   Naive is easy to set up and its results are commonly used to show the worst
   performing baseline.

   Creates an instance of the Naive strategy.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param evaluation_protocol: The evaluation plugin.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: CWRStar(model: Module, optimizer: Optimizer, criterion, second_last_layer_name, num_classes=50, evaluation_protocol: Optional[EvalProtocol] = None, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   CWR* Strategy.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param second_last_layer_name: name of the second to last layer
           (layer just before the classifier).
   :param num_classes: total number of classes.
   :param evaluation_protocol: The evaluation plugin.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: Replay(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, evaluation_protocol: Optional[EvalProtocol] = None, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Experience replay strategy. See ReplayPlugin for more details.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param mem_size: replay buffer size.
   :param evaluation_protocol: The evaluation plugin.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: GDumb(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, evaluation_protocol: Optional[EvalProtocol] = None, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   GDumb strategy. See GDumbPlugin for more details.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param mem_size: replay buffer size.
   :param evaluation_protocol: The evaluation plugin.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.


.. py:class:: Cumulative(model: Module, optimizer: Optimizer, criterion, evaluation_protocol: Optional[EvalProtocol] = None, train_mb_size: int = 1, train_epochs: int = 1, test_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Cumulative strategy. At each step,
       train model with data from all previous steps and current step.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param evaluation_protocol: The evaluation plugin.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param test_mb_size: The test minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.

   .. method:: adapt_train_dataset(self, **kwargs)

      Called after the dataset initialization and before the
      dataloader initialization. Allows to customize the dataset.
      :param kwargs:
      :return:



