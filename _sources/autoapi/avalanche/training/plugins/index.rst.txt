:mod:`avalanche.training.plugins`
=================================

.. py:module:: avalanche.training.plugins


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.plugins.StrategyPlugin
   avalanche.training.plugins.ReplayPlugin
   avalanche.training.plugins.GDumbPlugin
   avalanche.training.plugins.EvaluationPlugin
   avalanche.training.plugins.CWRStarPlugin



.. py:class:: StrategyPlugin

   Base class for strategy plugins. Implements all the callbacks required
   by the BaseStrategy with an empty function. Subclasses must override
   the callbacks.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: before_training(self, strategy, **kwargs)


   .. method:: adapt_train_dataset(self, strategy, **kwargs)


   .. method:: before_training_epoch(self, strategy, **kwargs)


   .. method:: before_training_iteration(self, strategy, **kwargs)


   .. method:: before_forward(self, strategy, **kwargs)


   .. method:: after_forward(self, strategy, **kwargs)


   .. method:: before_backward(self, strategy, **kwargs)


   .. method:: after_backward(self, strategy, **kwargs)


   .. method:: after_training_iteration(self, strategy, **kwargs)


   .. method:: before_update(self, strategy, **kwargs)


   .. method:: after_update(self, strategy, **kwargs)


   .. method:: after_training_epoch(self, strategy, **kwargs)


   .. method:: after_training(self, strategy, **kwargs)


   .. method:: before_test(self, strategy, **kwargs)


   .. method:: adapt_test_dataset(self, strategy, **kwargs)


   .. method:: before_test_step(self, strategy, **kwargs)


   .. method:: after_test_step(self, strategy, **kwargs)


   .. method:: after_test(self, strategy, **kwargs)


   .. method:: before_test_iteration(self, strategy, **kwargs)


   .. method:: before_test_forward(self, strategy, **kwargs)


   .. method:: after_test_forward(self, strategy, **kwargs)


   .. method:: after_test_iteration(self, strategy, **kwargs)



.. py:class:: ReplayPlugin(mem_size=200)

   Bases: :class:`avalanche.training.plugins.StrategyPlugin`

   Experience replay plugin.

   Handles an external memory filled with randomly selected
   patterns and implements the "adapt_train_dataset" callback to add them to
   the training set.

   The :mem_size: attribute controls the number of patterns to be stored in 
   the external memory. We assume the training set contains at least 
   :mem_size: data points.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: adapt_train_dataset(self, strategy, **kwargs)

      Expands the current training set with datapoint from
      the external memory before training.


   .. method:: after_training(self, strategy, **kwargs)

      After training we update the external memory with the patterns of
      the current training batch/task. 



.. py:class:: GDumbPlugin(mem_size=200)

   Bases: :class:`avalanche.training.plugins.StrategyPlugin`

   A GDumb plugin. At each step the model
   is trained with all and only the data of the external memory.
   The memory is updated at the end of each step to add new classes or
   new examples of already encountered classes.

   This plugin can be combined with a Naive strategy to obtain the
   standard GDumb strategy.

   https://www.robots.ox.ac.uk/~tvg/publications/2020/gdumb.pdf

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: adapt_train_dataset(self, strategy, **kwargs)

      Before training we make sure to organize the memory following
      GDumb approach and updating the dataset accordingly.



.. py:class:: EvaluationPlugin(evaluation_protocol)

   Bases: :class:`avalanche.training.plugins.StrategyPlugin`

   An evaluation plugin that obtains relevant data from the
   training and testing loops of the strategy through callbacks.

   Internally, the evaluation plugin tries uses the "evaluation_protocol"
   (an instance of :class:`EvalProtocol`), to compute the
   required metrics. The "evaluation_protocol" is usually passed as argument
   from the strategy.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: get_train_result(self)


   .. method:: get_test_result(self)


   .. method:: before_training(self, strategy, **kwargs)


   .. method:: after_training_iteration(self, strategy, **kwargs)


   .. method:: before_test_step(self, strategy, **kwargs)


   .. method:: after_test_iteration(self, strategy, **kwargs)


   .. method:: after_test_step(self, strategy, **kwargs)


   .. method:: after_test(self, strategy, **kwargs)



.. py:class:: CWRStarPlugin(model, second_last_layer_name, num_classes=50)

   Bases: :class:`avalanche.training.plugins.StrategyPlugin`

   Base class for strategy plugins. Implements all the callbacks required
   by the BaseStrategy with an empty function. Subclasses must override
   the callbacks.

   CWR* Strategy.

   :param model: trained model
   :param second_last_layer_name: name of the second to last layer.
   :param num_classes: total number of classes

   .. method:: after_training(self, strategy, **kwargs)


   .. method:: before_training(self, strategy, **kwargs)


   .. method:: before_test(self, strategy, **kwargs)


   .. method:: consolidate_weights(model, cur_clas)
      :staticmethod:

      Mean-shift for the target layer weights


   .. method:: set_consolidate_weights(model)
      :staticmethod:

      set trained weights 


   .. method:: reset_weights(model, cur_clas)
      :staticmethod:

      reset weights


   .. method:: freeze_lower_layers(self)



