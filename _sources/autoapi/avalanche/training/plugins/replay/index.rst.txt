:mod:`avalanche.training.plugins.replay`
========================================

.. py:module:: avalanche.training.plugins.replay


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.plugins.replay.ReplayPlugin



.. py:class:: ReplayPlugin(mem_size=200)

   Bases: :class:`avalanche.training.plugins.strategy_plugin.StrategyPlugin`

   Experience replay plugin.

   Handles an external memory filled with randomly selected
   patterns and implementing `before_training_exp` and `after_training_exp`
   callbacks. 
   The `before_training_exp` callback is implemented in order to use the
   dataloader that creates mini-batches with examples from both training
   data and external memory. The examples in the mini-batch is balanced 
   such that there are the same number of examples for each experience.    

   The `after_training_exp` callback is implemented in order to add new 
   patterns to the external memory.

   The :mem_size: attribute controls the total number of patterns to be stored 
   in the external memory.

   .. method:: before_training_exp(self, strategy, num_workers=0, shuffle=True, **kwargs)

      Dataloader to build batches containing examples from both memories and
      the training dataset


   .. method:: after_training_exp(self, strategy, **kwargs)

      After training we update the external memory with the patterns of
      the current training batch/task, adding the patterns from the new
      experience and removing those from past experiences to comply the limit
      of the total number of patterns in memory 



