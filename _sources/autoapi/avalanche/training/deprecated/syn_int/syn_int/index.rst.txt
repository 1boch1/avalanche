:mod:`avalanche.training.deprecated.syn_int.syn_int`
====================================================

.. py:module:: avalanche.training.deprecated.syn_int.syn_int

.. autoapi-nested-parse::

   Synaptic Intelligence Strategy 



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.deprecated.syn_int.syn_int.SynInt



.. py:class:: SynInt(model, optimizer=None, criterion=torch.nn.CrossEntropyLoss(), mb_size=128, train_ep=2, multi_head=False, device=None, preproc=None, eval_protocol=EvalProtocol(metrics=[ACC()]), lr=0.001, momentum=0.9, l2=0.0005, si_lambda=0)

   Bases: :class:`avalanche.training.deprecated.strategy.Strategy`

   Synaptic Intelligence Strategy.

   This is the Synaptic Intelligence pytorch implementation of the
   algorithm described in the paper "Continual Learning Through Synaptic
   Intelligence" (https://arxiv.org/abs/1703.04200)

   :param model: pytorch basic model.
   :param optimizer: pytorch optimizer.
   :param criterion: pytorch optimization criterion.
   :param int mb_size: mini-batch size for SGD.
   :param int train_ep: training epochs for each task/batch
   :param bool multi_head: multi-head or not
   :param device device: device on which to run the script.
   :param preproc: prepocessing function.
   :param eval_protocol: avalanche evaluation protocol.
   :param lr: learning rate for the optimizer.
   :param momentum: momentum used
   :param l2: weights decay regularization.
   :param si_lambda: Synaptic Intellgence lambda term.

   .. method:: before_train(self)


   .. method:: compute_loss(self, logits, y_mb)


   .. method:: before_iteration(self)


   .. method:: after_iter_ended(self)


   .. method:: after_train(self)



