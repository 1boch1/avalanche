:mod:`avalanche.extras.strategy_trace`
======================================

.. py:module:: avalanche.extras.strategy_trace


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.extras.strategy_trace.StrategyTrace
   avalanche.extras.strategy_trace.DotTrace



.. py:class:: StrategyTrace

   Bases: :class:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: before_training(self, strategy: PluggableStrategy)


   .. method:: before_training_step(self, strategy: PluggableStrategy)


   .. method:: adapt_train_dataset(self, strategy: PluggableStrategy)


   .. method:: before_training_epoch(self, strategy: PluggableStrategy)


   .. method:: before_training_iteration(self, strategy: PluggableStrategy)


   .. method:: before_forward(self, strategy: PluggableStrategy)


   .. method:: after_forward(self, strategy: PluggableStrategy)


   .. method:: before_backward(self, strategy: PluggableStrategy)


   .. method:: after_backward(self, strategy: PluggableStrategy)


   .. method:: after_training_iteration(self, strategy: PluggableStrategy)


   .. method:: before_update(self, strategy: PluggableStrategy)


   .. method:: after_update(self, strategy: PluggableStrategy)


   .. method:: after_training_epoch(self, strategy: PluggableStrategy)


   .. method:: after_training_step(self, strategy: PluggableStrategy)


   .. method:: after_training(self, strategy: PluggableStrategy)


   .. method:: before_test(self, strategy: PluggableStrategy)


   .. method:: adapt_test_dataset(self, strategy: PluggableStrategy)


   .. method:: before_test_step(self, strategy: PluggableStrategy)


   .. method:: after_test_step(self, strategy: PluggableStrategy)


   .. method:: after_test(self, strategy: PluggableStrategy)


   .. method:: before_test_iteration(self, strategy: PluggableStrategy)


   .. method:: before_test_forward(self, strategy: PluggableStrategy)


   .. method:: after_test_forward(self, strategy: PluggableStrategy)


   .. method:: after_test_iteration(self, strategy: PluggableStrategy)



.. py:class:: DotTrace(stdout=True, stderr=False, trace_file: Union[str, Path] = None, *, iterations_per_line: int = 50, lines_between_summaries: int = 4)

   Bases: :class:`avalanche.extras.strategy_trace.StrategyTrace`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: _update_metrics(self, strategy: PluggableStrategy)


   .. method:: _new_line(self)


   .. method:: _message(self, msg: str)


   .. method:: _file_error(self, err, new_line=True)


   .. method:: after_training_iteration(self, strategy: PluggableStrategy)


   .. method:: after_test_iteration(self, strategy: PluggableStrategy)


   .. method:: before_training_step(self, strategy: PluggableStrategy)


   .. method:: before_test_step(self, strategy: PluggableStrategy)


   .. method:: after_training_epoch(self, strategy: PluggableStrategy)


   .. method:: after_test_step(self, strategy: PluggableStrategy)


   .. method:: before_training(self, strategy: PluggableStrategy)


   .. method:: before_test(self, strategy: PluggableStrategy)


   .. method:: after_training(self, strategy: PluggableStrategy)


   .. method:: after_test(self, strategy: PluggableStrategy)


   .. method:: _on_iteration(self, strategy: PluggableStrategy)


   .. method:: _on_step_start(self, strategy: PluggableStrategy)


   .. method:: _on_epoch_end(self, strategy: PluggableStrategy)


   .. method:: _on_phase_start(self, strategy: PluggableStrategy)


   .. method:: _on_phase_end(self, strategy: PluggableStrategy)



.. data:: DefaultStrategyTrace
   

   

