:mod:`avalanche.extras.models`
==============================

.. py:module:: avalanche.extras.models


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   batch_renorm/index.rst
   mlp_tiny_imagenet/index.rst
   mobilenetv1/index.rst
   simple_cnn/index.rst
   simple_mlp/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.extras.models.SimpleCNN
   avalanche.extras.models.SimpleMLP



.. py:class:: SimpleCNN(num_classes=10)

   Bases: :class:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. method:: forward(self, x)



.. py:class:: SimpleMLP(num_classes=10, input_size=28 * 28)

   Bases: :class:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. method:: forward(self, x)



