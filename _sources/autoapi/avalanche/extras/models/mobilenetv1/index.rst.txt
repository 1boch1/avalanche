:mod:`avalanche.extras.models.mobilenetv1`
==========================================

.. py:module:: avalanche.extras.models.mobilenetv1

.. autoapi-nested-parse::

   This is the definition od the Mid-caffenet high resolution in Pythorch



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.extras.models.mobilenetv1.MobilenetV1



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.extras.models.mobilenetv1.remove_sequential
   avalanche.extras.models.mobilenetv1.remove_DwsConvBlock


.. function:: remove_sequential(network, all_layers)


.. function:: remove_DwsConvBlock(cur_layers)


.. py:class:: MobilenetV1(pretrained=True, latent_layer_num=20)

   Bases: :class:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. method:: forward(self, x, latent_input=None, return_lat_acts=False)



.. data:: model
   

   

