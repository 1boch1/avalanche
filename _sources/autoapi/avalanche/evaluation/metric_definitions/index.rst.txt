:mod:`avalanche.evaluation.metric_definitions`
==============================================

.. py:module:: avalanche.evaluation.metric_definitions


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metric_definitions.Metric
   avalanche.evaluation.metric_definitions.PluginMetric



.. py:class:: Metric

   Bases: :class:`Protocol[TResult]`

   Definition of a metric.

   A metric exposes methods to reset the internal counters as well as
   a method used to retrieve the result.

   The specific metric implementation exposes ways to update the metric
   state. Usually, standalone metrics like :class:`Sum`, :class:`Mean`,
   :class:`Accuracy`, ... expose an `update` method.

   On the other hand, metrics that are to be used by using the
   :class:`EvaluationPlugin` usually update their value by receiving events
   from the plugin (see the :class:`PluginMetric` class for more details).

   .. method:: result(self) -> Optional[TResult]

      Obtains the value of the metric.

      :return: The value of the metric.


   .. method:: reset(self) -> None

      Resets the metric internal state.

      :return: None.



.. py:class:: PluginMetric

   Bases: :class:`Metric[TResult]`, :class:`StrategyCallbacks['MetricResult']`, :class:`abc.ABC`

   A kind of metric that can be used by the :class:`EvaluationPlugin`.

   This class leaves the implementation of the `result` and `reset` methods
   to child classes while providing an empty implementation of the callbacks
   invoked by the :class:`EvaluationPlugin`. Subclasses should implement
   the `result`, `reset` and the desired callbacks to compute the specific
   metric.

   This class also provides a utility method, `_next_x_position`, which can
   be used to label each metric value with its appropriate "x" position in the
   plot.

   Creates an instance of a plugin metric.

   Child classes can safely invoke this (super) constructor as the first
   step.

   .. method:: result(self) -> Optional[TResult]
      :abstractmethod:


   .. method:: reset(self) -> None
      :abstractmethod:


   .. method:: before_training(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_training_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: adapt_train_dataset(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_training_epoch(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_training_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_backward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_backward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_update(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_update(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training_epoch(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_test(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: adapt_test_dataset(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_test_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_test_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_test(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_test_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_test_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_test_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_test_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: _next_x_position(self, metric_name: str, initial_x: int = 0) -> int

      Utility method that can be used to get the next "x" position of a
      metric value (given its name).

      :param metric_name: The metric value name.
      :param initial_x: The initial "x" value. Defaults to 0.
      :return: The next "x" value to use.



