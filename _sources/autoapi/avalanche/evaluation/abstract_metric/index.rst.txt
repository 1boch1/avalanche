:mod:`avalanche.evaluation.abstract_metric`
===========================================

.. py:module:: avalanche.evaluation.abstract_metric


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.abstract_metric.AbstractMetric



.. data:: MetricCallbackType
   

   

.. data:: WrapperCallbackType
   

   

.. data:: ListenersType
   

   

.. data:: TAbstractMetric
   

   

.. py:class:: AbstractMetric

   Bases: :class:`abc.ABC`, :class:`avalanche.evaluation.metric_definitions.Metric`

   Base class for all Metric.

   This class exposes protected methods that can be used to link event
   types to callbacks and to keep track of the last "x" position of a metric
   value.

   Creates an instance of AbstractMetric.

   This sets up the initial values of different internal utility fields
   that are used for keeping track of the binding between event types
   and callbacks as well as other fields that can be used by child classes.

   .. attribute:: _listeners
      :annotation: :List[Tuple[bool, ListenersType]] = []

      A list of _listeners to notify on new events, as a list of tuples.
      The first element of the tuple is a boolean value (True if the listener
      is a metric added using "_use_metric", False if it is a regular
      callback). The second element is a two element tuple describing 1) the
      event type (None when listening on any event)  and 2) the listener to 
      notify.


   .. attribute:: _metric_x_counters
      :annotation: :Dict[str, SimpleCounter]

      A dictionary that can be used to keep track of the next "x" position
      of the value of a metric. Usually used by calling the 
      "_next_x_position" method.


   .. method:: _on(self: TAbstractMetric, event_types: Optional[Union[Type[EvalData], Sequence[Type[EvalData]]]], *listeners: MetricCallbackType) -> TAbstractMetric

      Registers the given listeners so that they will be invoked when certain
      training/test events occur.

      :param event_types: The events to listen for. Can be None, which
          means that the listeners will receive all events.
      :param listeners: The listeners to notify when one of the events occur.
      :return: Self.


   .. method:: _attach(self: TAbstractMetric, *listeners: MetricCallbackType) -> TAbstractMetric

      Registers the given listeners so that they will be invoked when an
      event occurs.

      This is equivalent to "_on(None, listeners)".

      :param listeners: The listeners to notify when an event occurs.
      :return: Self.


   .. method:: _use_metric(self: TAbstractMetric, metric: Metric, *listeners: WrapperCallbackType) -> TAbstractMetric

      Registers the given listeners so that they will be invoked when the
      given metric emits a value.

      The metric value will not be directly sent to the Loggers but
      will be made available to listeners. This is useful when using existing
      metrics to compute the value of the current metric.

      :param metric: The metric to observe.
      :param listeners: The listeners to notify when the metric returns
          a metric value.
      :return: Self.


   .. method:: __call__(self, eval_data: EvalData) -> MetricResult

      Used to feed the metric.

      This method is usually called by the evaluation plugin when an event
      occurs (epoch started, iteration ended, ...).

      When called, the metric will dispatch the event to the appropriate
      listener registered using "_on", "_attach" and "_use_metric".

      :param eval_data: The evaluation data received from the evaluation
          plugin.
      :return: The results of this metric. Can be None.


   .. method:: _next_x_position(self, metric_name: str, initial_x: int = 0) -> int

      Utility method that can be used to get the next "x" position of a
      metric value (given its name).

      :param metric_name: The metric value name.
      :param initial_x: The initial "x" value. Defaults to 0.
      :return: The next "x" value to use.



