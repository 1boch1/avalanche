:mod:`avalanche.evaluation.metrics`
===================================

.. py:module:: avalanche.evaluation.metrics


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   accuracy/index.rst
   confusion_matrix/index.rst
   forgetting/index.rst
   loss/index.rst
   timing/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.EpochAccuracy
   avalanche.evaluation.metrics.RunningEpochAccuracy
   avalanche.evaluation.metrics.ConfusionMatrix
   avalanche.evaluation.metrics.TaskForgetting
   avalanche.evaluation.metrics.EpochLoss
   avalanche.evaluation.metrics.RunningEpochLoss
   avalanche.evaluation.metrics.AverageEpochTime
   avalanche.evaluation.metrics.EpochTime



.. py:class:: EpochAccuracy(*, train=True, test=True)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The average accuracy metric.

   This metric is computed separately for each task.

   The accuracy will be emitted after each epoch by aggregating minibatch
   values. Beware that the training accuracy is the "running" one.

   Creates an instance of the EpochAccuracy metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: result_emitter(self, eval_data: EvalData)



.. py:class:: RunningEpochAccuracy(*, train=True, test=True)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The running average accuracy metric.

   Differently from :class:`EpochAccuracy`, this metric will emit a value
   after each iteration, too. The metric value will be also emitted on
   "train epoch end" and "test step end" events, exactly as
   :class:`EpochAccuracy`.

   Creates an instance of the RunningEpochAccuracy metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: result_emitter(self, eval_data)



.. py:class:: ConfusionMatrix(*, train: bool = False, test: bool = True, num_classes: int = None, normalize: str = None, save_image: bool = True, image_creator: Callable[[ndarray], Image] = default_cm_image_creator)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The Confusion Matrix metric.

   This matrix logs the Tensor and PIL Image representing the confusion
   matrix after each epoch.

   This metric is computed separately for each task.

   By default this metric computes the matrix on the test set only but this
   behaviour can be changed by passing train=True in the constructor.

   Creates an instance of the Confusion Matrix metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to False.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.
   :param num_classes: When not None, is used to properly define the
       amount of rows/columns in the confusion matrix. When None, the
       matrix will have many rows/columns as the maximum value of the
       predicted and true pattern labels. Defaults to None.
   :param normalize: Normalizes confusion matrix over the true (rows),
       predicted (columns) conditions or all the population. If None,
       confusion matrix will not be normalized. Valid values are: 'true',
       'pred' and 'all'.
   :param save_image: If True, a graphical representation of the confusion
       matrix will be logged, too. If False, only the Tensor representation
       will be logged. Defaults to True.
   :param image_creator: A callable that, given the tensor representation
       of the confusion matrix, returns a graphical representation of the
       matrix as a PIL Image. Defaults to `default_cm_image_creator`.

   .. method:: result_emitter(self, eval_data)



.. py:class:: TaskForgetting

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The TaskForgetting metric, describing the accuracy loss detected for a
   certain task.

   This metric is computed separately for each task as the difference between
   the accuracy result obtained after training on a task and the accuracy
   result obtained on the same task at the end of successive steps.

   This metric is computed during the test phase only.

   Creates an instance of the Catastrophic TaskForgetting metric.

   .. attribute:: best_accuracy
      :annotation: :Dict[int, float]

      The best accuracy of each task.


   .. method:: result_emitter(self, eval_data)



.. py:class:: EpochLoss(*, train=True, test=True)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The average loss metric.

   This metric is computed separately for each task.

   The loss will be emitted after each epoch by aggregating minibatch
   values.

   Creates an instance of the EpochLoss metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: result_emitter(self, eval_data)



.. py:class:: RunningEpochLoss(*, train=True, test=True)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The running average loss metric.

   Differently from :class:`EpochLoss`, this metric will emit a value
   after each iteration, too. The metric value will be also emitted on
   "train epoch end" and "test step end" events, exactly as
   :class:`EpochLoss`.

   Creates an instance of the RunningEpochLoss metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: result_emitter(self, eval_data)



.. py:class:: AverageEpochTime(*, train=True, test=False)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   Time usage metric, measured in seconds.

   The time is measured as the average epoch time of a step.
   The average value is computed and emitted at the end of the train/test step.

   By default this metric takes the time of epochs in training steps only. This
   behaviour can be changed by passing test=True in the constructor.

   Consider that, when used on the test set, the epoch time is the same as the
   step time. This means that this metric and the :class:`EpochTime` metric
   will emit the same values when used for the test phase.

   Creates an instance of the Average Epoch Time metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the time will be taken on training epochs.
       Defaults to True.
   :param test: When True, the time will be taken on test epochs.
       Defaults to False.

   .. method:: step_start(self, _)


   .. method:: epoch_start(self, _)


   .. method:: epoch_end(self, _)


   .. method:: result_emitter(self, eval_data)



.. py:class:: EpochTime(*, train=True, test=False)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   Time usage metric, measured in seconds.

   The time is measured between the start and end of an epoch.

   Beware that this metric logs a time value for each epoch! For the average
   epoch time use :class:`AverageEpochTime` instead, which logs the average
   the average epoch time for each step.

   By default this metric takes the time on training epochs only but this
   behaviour can be changed by passing test=True in the constructor.

   Creates an instance of the Epoch Time metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the time will be taken on training epochs.
       Defaults to True.
   :param test: When True, the time will be taken on test epochs.
       Defaults to False.

   .. method:: time_start(self, _)


   .. method:: result_emitter(self, eval_data)



