:mod:`avalanche.evaluation.metrics`
===================================

.. py:module:: avalanche.evaluation.metrics

.. autoapi-nested-parse::

   Common metrics for CL. 



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.MAC
   avalanche.evaluation.metrics.GPUUsage
   avalanche.evaluation.metrics.CPUUsage
   avalanche.evaluation.metrics.ACC
   avalanche.evaluation.metrics.CF
   avalanche.evaluation.metrics.RAMU
   avalanche.evaluation.metrics.DiskUsage
   avalanche.evaluation.metrics.CM
   avalanche.evaluation.metrics.TimeUsage



.. py:class:: MAC

   Multiply-and-accumulate metric. Provides a lower bound of the 
   computational cost of a model in a hardware-independent way by 
   computing the number of multiplications. Currently supports only 
   Linear or Conv2d modules. Other operations are ignored.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: compute(self, model, dummy_input)

      Computes the MAC metric.

      :param model: current model.
      :param dummy_input: A tensor of the correct size to feed as input 
          to model.
      :return: MAC metric.


   .. method:: update_compute_cost(self, module, input, output)


   .. method:: is_recognized_module(self, mod)



.. py:class:: GPUUsage(gpu_id, every=10)

   GPU usage metric measured as average usage percentage over time.

   :param gpu_id: GPU device ID
   :param every: time delay (in seconds) between measurements

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: compute(self, t)

      Compute CPU usage measured in seconds.

      :param t: task id
      :return: float: average GPU usage


   .. method:: push_lines(self)


   .. method:: close(self)



.. py:class:: CPUUsage

   CPU usage metric measured in seconds.

   .. method:: compute(self, t)

      Compute CPU usage measured in seconds.

      :param t: task id
      :return: tuple (float, float): (user CPU time, system CPU time)



.. py:class:: ACC(num_class=None)

   Bases: :class:`object`

   Accuracy metrics should be called for each test set

   :param num_class (int, optional): number of classes in the test_set
       (useful in case the test_set does not cover all the classes
       in the train_set).

   .. method:: compute(self, y, y_hat)

      :param y (tensor list or tensor): true labels for each mini-batch
      :param y_hat (tensor list or tensor): predicted labels for each
          mini-batch

      :return acc (float): average accuracy for the test set
      :return accs (float list): accuracy for each class in the training set            



.. py:class:: CF(num_class=None)

   Bases: :class:`object`

   Catastrophic Forgetting metric.

   .. method:: compute(self, y, y_hat, train_t, test_t)

      :param y (tensor list or tensor): true labels for each mini-batch
      :param y_hat (tensor list or tensor): predicted labels for each
          mini-batch



.. py:class:: RAMU

   Bases: :class:`object`

   RAM Usage metric.

   .. method:: compute(self, t)



.. py:class:: DiskUsage(path_to_monitor=None, disk_io=False)

   Bases: :class:`object`

   :param path_to_monitor (string): a valid path to folder.
           If None, the current working directory is used.
   :param disk_io: True to enable monitoring of I/O operations on disk.
           WARNING: Reports are system-wide, grouping all disks.

   .. method:: compute(self, t)

      :param t: task id

      :return usage, io (tuple): io is None if disk_io is False



.. py:class:: CM(num_class=None)

   Bases: :class:`object`

   Confusion Matrix computation

   .. method:: compute(self, y, y_hat, normalize=False)

      :param y (tensor or tensors list): true labels for each minibatch
      :param y_hat (tensor or tensors list): predicted labels for each
          minibatch



.. py:class:: TimeUsage

   Time usage metric measured in seconds.

   Initialize self.  See help(type(self)) for accurate signature.

   .. method:: compute(self, t)



