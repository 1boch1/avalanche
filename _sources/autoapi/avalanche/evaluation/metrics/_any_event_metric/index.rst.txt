:mod:`avalanche.evaluation.metrics._any_event_metric`
=====================================================

.. py:module:: avalanche.evaluation.metrics._any_event_metric


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics._any_event_metric.AnyEventMetric



.. py:class:: AnyEventMetric

   Bases: :class:`PluginMetric[TResult]`, :class:`abc.ABC`

   A metric that calls a given abstract method each time a new event is
   encountered. For internal use only.

   Initializes the "AnyEventMetric" instance.

   Can be safely called by subclasses at the beginning of the
   initialization procedure.

   .. method:: on_event(self, strategy: PluggableStrategy) -> 'MetricResult'
      :abstractmethod:


   .. method:: before_training(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_training_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: adapt_train_dataset(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_training_epoch(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_training_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_backward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_backward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_update(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_update(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training_epoch(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_training(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_eval(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: adapt_eval_dataset(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_eval_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_eval_step(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_eval(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_eval_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: before_eval_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_eval_forward(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: after_eval_iteration(self, strategy: PluggableStrategy) -> 'MetricResult'



