:mod:`avalanche.evaluation.metrics.accuracy`
============================================

.. py:module:: avalanche.evaluation.metrics.accuracy


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.accuracy.EpochAccuracy
   avalanche.evaluation.metrics.accuracy.RunningEpochAccuracy



.. py:class:: EpochAccuracy(*, train=True, test=True)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The average accuracy metric.

   This metric is computed separately for each task.

   The accuracy will be emitted after each epoch by aggregating minibatch
   values. Beware that the training accuracy is the "running" one.

   Creates an instance of the EpochAccuracy metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: result_emitter(self, eval_data: EvalData)



.. py:class:: RunningEpochAccuracy(*, train=True, test=True)

   Bases: :class:`avalanche.evaluation.abstract_metric.AbstractMetric`

   The running average accuracy metric.

   Differently from :class:`EpochAccuracy`, this metric will emit a value
   after each iteration, too. The metric value will be also emitted on
   "train epoch end" and "test step end" events, exactly as
   :class:`EpochAccuracy`.

   Creates an instance of the RunningEpochAccuracy metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: result_emitter(self, eval_data)



