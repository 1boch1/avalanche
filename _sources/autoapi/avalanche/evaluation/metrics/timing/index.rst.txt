:mod:`avalanche.evaluation.metrics.timing`
==========================================

.. py:module:: avalanche.evaluation.metrics.timing


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.timing.ElapsedTime
   avalanche.evaluation.metrics.timing.MinibatchTime
   avalanche.evaluation.metrics.timing.EpochTime
   avalanche.evaluation.metrics.timing.AverageEpochTime
   avalanche.evaluation.metrics.timing.StepTime



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.timing.timing_metrics


.. py:class:: ElapsedTime

   Bases: :class:`Metric[float]`

   The elapsed time metric.

   Instances of this metric keep track of the time elapsed between calls to the
   `update` method. The starting time is set when the `update` method is called
   for the first time. That is, the starting time is *not* taken at the time
   the constructor is invoked.

   Calling the `update` method more than twice will update the metric to the
   elapsed time between the first and the last call to `update`.

   The result, obtained using the `result` method, is the time, in seconds,
   computed as stated above.

   The `reset` method will set the metric to its initial state, thus resetting
   the initial time. This metric in its initial state (or if the `update`
   method was invoked only once) will return an elapsed time of 0.

   Creates an instance of the accuracy metric.

   This metric in its initial state (or if the `update` method was invoked
   only once) will return an elapsed time of 0. The metric can be updated
   by using the `update` method while the running accuracy can be retrieved
   using the `result` method.

   .. method:: update(self) -> None

      Update the elapsed time.

      For more info on how to set the initial time see the class description.

      :return: None.


   .. method:: result(self) -> float

      Retrieves the elapsed time.

      Calling this method will not change the internal state of the metric.

      :return: The elapsed time, in seconds, as a float value.


   .. method:: reset(self) -> None

      Resets the metric, including the initial time.

      :return: None.



.. py:class:: MinibatchTime(*, train=True, test=True)

   Bases: :class:`PluginMetric[float]`

   The minibatch time metric.

   This metric "logs" the elapsed time for each iteration. Beware that this
   metric will not average the time across minibatches!

   If a more coarse-grained logging is needed, consider using
   :class:`EpochTime`, :class:`AverageEpochTime` or
   :class:`StepTime` instead.

   Creates an instance of the minibatch time metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: result(self) -> float


   .. method:: reset(self) -> None


   .. method:: before_training_iteration(self, strategy) -> MetricResult


   .. method:: before_test_iteration(self, strategy) -> MetricResult


   .. method:: after_training_iteration(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: after_test_iteration(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: _package_result(self, strategy: PluggableStrategy) -> MetricResult



.. py:class:: EpochTime(*, train=True, test=True)

   Bases: :class:`PluginMetric[float]`

   The epoch elapsed time metric.

   The elapsed time will be logged after each epoch. Beware that this
   metric will not average the time across epochs!

   If logging the average time across epochs is needed, consider using
   :class:`AverageEpochTime` instead.

   Creates an instance of the epoch time metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: before_training_epoch(self, strategy) -> MetricResult


   .. method:: before_test_step(self, strategy) -> MetricResult


   .. method:: after_training_epoch(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: after_test_step(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: reset(self) -> None


   .. method:: result(self) -> float


   .. method:: _package_result(self, strategy: PluggableStrategy) -> MetricResult



.. py:class:: AverageEpochTime(*, train=True, test=True)

   Bases: :class:`PluginMetric[float]`

   The average epoch time metric.

   The average elapsed time will be logged at the end of the step.

   Beware that this metric will average the time across epochs! If logging the
   epoch-specific time is needed, consider using :class:`EpochTime` instead.

   Creates an instance of the average epoch time metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: before_training_epoch(self, strategy) -> MetricResult


   .. method:: before_test_step(self, strategy) -> MetricResult


   .. method:: after_training_epoch(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: after_test_step(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: reset(self) -> None


   .. method:: result(self) -> float


   .. method:: _package_result(self, strategy: PluggableStrategy) -> MetricResult



.. py:class:: StepTime(*, train=True, test=True)

   Bases: :class:`PluginMetric[float]`

   The step time metric.

   This metric may seem very similar to :class:`AverageEpochTime`. However,
   differently from that: 1) obviously, the time is not averaged by dividing
   by the number of epochs; 2) most importantly, the time consumed outside the
   epoch loop is accounted too (a thing that :class:`AverageEpochTime` doesn't
   support). For instance, this metric is more suitable when measuring times
   of algorithms involving after-training consolidation, replay pattern
   selection and other time consuming mechanisms.

   Creates an instance of the step time metric.

   The train and test parameters can be True at the same time. However,
   at least one of them must be True.

   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param test: When True, the metric will be computed on the test
       phase. Defaults to True.

   .. method:: before_training_step(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: before_test_step(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: after_training_step(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: after_test_step(self, strategy: PluggableStrategy) -> MetricResult


   .. method:: reset(self) -> None


   .. method:: result(self) -> float


   .. method:: _package_result(self, strategy: PluggableStrategy) -> MetricResult



.. function:: timing_metrics(*, minibatch=False, epoch=False, epoch_average=False, step=False, train=None, test=None) -> List[PluginMetric]

   Helper method that can be used to obtain the desired set of metric.

   :param minibatch: If True, will return a metric able to log the minibatch
       elapsed time.
   :param epoch: If True, will return a metric able to log the epoch elapsed
       time.
   :param epoch_average: If True, will return a metric able to log the average
       epoch elapsed time.
   :param step: If True, will return a metric able to log the step elapsed
       time.
   :param train: If True, metrics will log values for the train flow. Defaults
       to None, which means that the per-metric default value will be used.
   :param test: If True, metrics will log values for the test flow. Defaults
       to None, which means that the per-metric default value will be used.

   :return: A list of plugin metrics.


