:mod:`avalanche.evaluation.metrics.ram_usage`
=============================================

.. py:module:: avalanche.evaluation.metrics.ram_usage


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.evaluation.metrics.ram_usage.RamUsage
   avalanche.evaluation.metrics.ram_usage.RamUsageMonitor



.. py:class:: RamUsage(two_read_average=False)

   Bases: :class:`Metric[float]`

   The RAM usage metric.

   Instances of this metric compute the punctual RAM usage as a float value.
   The metric updates the value each time the `update` method is called.

   The result, obtained using the `result` method, is the usage in bytes.

   The reset method will bring the metric to its initial state. By default
   this metric in its initial state will return an usage value of `None`.

   Creates an instance of the RAM usage metric.

   By default this metric in its initial state will return a RAM usage
   value of `None`. The metric can be updated by using the `update` method
   while the average usage value can be retrieved using the `result`
   method.

   :param two_read_average: If True, the value resulting from calling
       `update` more than once will set the result to the average between
       the last read and the current RAM usage value.

   .. attribute:: _process_handle
      :annotation: :Optional[Process]

      The process handle, lazily initialized.


   .. attribute:: _last_values
      

      The last detected RAM usage.


   .. attribute:: _first_update
      :annotation: = True

      An internal flag to keep track of the first call to the `update` method.


   .. attribute:: _two_read_average
      

      If True, the value resulting from calling `update` more than once will
      set the result to the average between the last read and the current RAM
      usage value.


   .. method:: update(self) -> None

      Update the RAM usage.

      :return: None.


   .. method:: result(self) -> Optional[float]

      Retrieves the RAM usage.

      Calling this method will not change the internal state of the metric.

      :return: The average RAM usage in bytes, as a float value.


   .. method:: reset(self) -> None

      Resets the metric.

      :return: None.



.. py:class:: RamUsageMonitor(*, timeout: float = 5.0, train=True, eval=False)

   Bases: :class:`AnyEventMetric[float]`

   The RAM usage metric.

   This metric logs the RAM usage.

   The logged value is in MiB.

   The metric can be either configured to log after a certain timeout or
   at each event.

   RAM usage is logged separately for the train and eval phases.

   Creates an instance of the RAM usage metric.

   The train and eval parameters can be True at the same time. However,
   at least one of them must be True.

   :param timeout: The timeout between each RAM usage check, in seconds.
       If None, the RAM usage is checked at every possible event (not
       recommended). Defaults to 5 seconds.
   :param train: When True, the metric will be computed on the training
       phase. Defaults to True.
   :param eval: When True, the metric will be computed on the eval
       phase. Defaults to False.

   .. method:: on_event(self, strategy: PluggableStrategy) -> 'MetricResult'


   .. method:: result(self) -> Optional[float]


   .. method:: reset(self) -> None


   .. method:: _package_result(self, strategy: PluggableStrategy) -> 'MetricResult'



