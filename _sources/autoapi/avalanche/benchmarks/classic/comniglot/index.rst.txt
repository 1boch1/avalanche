:mod:`avalanche.benchmarks.classic.comniglot`
=============================================

.. py:module:: avalanche.benchmarks.classic.comniglot


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.comniglot.SplitOmniglot
   avalanche.benchmarks.classic.comniglot.PermutedOmniglot
   avalanche.benchmarks.classic.comniglot.RotatedOmniglot


.. function:: SplitOmniglot(n_steps: int, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_omniglot_train_transform, test_transform=_default_omniglot_test_transform)

   Creates a CL scenario using the OMNIGLOT dataset.
   This helper create the basic split OMNIGLOT scenario,
   where the 1623 classes of the OMNIGLOT dataset are evenly splitted into the
   given nuber of tasks.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of incremental steps in the current
       scenario.
       The value of this parameter should be a divisor of 10.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT split OMNIGLOT scenario if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT split OMNIGLOT
       scenario otherwise.


.. function:: PermutedOmniglot(n_steps: int, seed: Optional[int] = None, train_transform: Any = _default_omniglot_train_transform, test_transform: Any = _default_omniglot_test_transform) -> NCScenario

   This helper create a permuted OMNIGLOT scenario: where a given number of
   random pixel permutations is used to permute the OMNIGLOT images in
   ``n_steps`` different manners, creating an equal number of tasks.
   Each task is composed of all the original OMNIGLOT classes, but the pixel
   in the images are permuted in different ways in every task.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of steps (tasks) in the current
       scenario. It indicates how many different permutations of the MNIST
       dataset have to be created.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param train_transform: The transformation to apply to the training data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT permuted OMNIGLOT scenario.


.. function:: RotatedOmniglot(n_steps: int, seed: Optional[int] = None, rotations_list: Optional[Sequence[int]] = None, train_transform=_default_omniglot_train_transform, test_transform=_default_omniglot_test_transform) -> NCScenario

   This helper create a rotated OMNIGLOT scenario: where a given number of
   random rotations are used to rotate the OMNIGLOT images in
   ``n_steps`` different manners, creating an equal number of tasks.
   Each task is composed of all the original OMNIGLOT classes, but the images
   are rotated in different ways and using different values in every task.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of steps (tasks) in the current
       scenario. It indicates how many different rotations of the OMNIGLOT
       dataset have to be created.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param rotations_list: A list of rotations values in degrees (from -180 to
       180) used to define the rotations. The rotation specified in position
       0 of the list will be applieed to the task 0, the rotation specified in
       position 1 will be applyed to task 1 and so on.
       If None, value of ``seed`` will be used to define the rotations.
       If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT rotated OMNIGLOT scenario.


