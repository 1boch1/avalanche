:mod:`avalanche.benchmarks.classic`
===================================

.. py:module:: avalanche.benchmarks.classic


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   ccifar10/index.rst
   ccifar100/index.rst
   ccub200/index.rst
   cfashion_mnist/index.rst
   cimagenet/index.rst
   cmnist/index.rst
   core50/index.rst
   ctiny_imagenet/index.rst
   openloris/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.OPENLORIS_DATA



Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.classic.CORe50
   avalanche.benchmarks.classic.SplitTinyImageNet
   avalanche.benchmarks.classic.SplitCIFAR10
   avalanche.benchmarks.classic._get_cifar10_dataset
   avalanche.benchmarks.classic.SplitCIFAR100
   avalanche.benchmarks.classic.SplitCIFAR110
   avalanche.benchmarks.classic.SplitMNIST
   avalanche.benchmarks.classic.PermutedMNIST
   avalanche.benchmarks.classic.RotatedMNIST
   avalanche.benchmarks.classic.SplitFMNIST
   avalanche.benchmarks.classic.SplitImageNet
   avalanche.benchmarks.classic.SplitCUB200
   avalanche.benchmarks.classic.create_generic_scenario_from_filelists
   avalanche.benchmarks.classic.OpenLORIS


.. function:: CORe50(root=expanduser('~') + '/.avalanche/data/core50/', scenario='nicv2_391', run=0)

   CORe50 continual scenario generator

   :param root: Path indicating where to store the dataset and related
       metadata. By default they will be stored in
       avalanche/datasets/core50/data/.
   :param scenario: CORe50 main scanario. I can be chosen between 'ni', 'nc',
       'nic', 'nicv2_79', 'nicv2_196' or 'nicv2_391.'
   :param run: number of run for the scenario. Batch ordering change based
       on this parameter (a number between 0 and 9).

   :returns: it returns a :class:`GenericCLScenario` instance that can be
       iterated.


.. function:: SplitTinyImageNet(n_steps=10, return_task_id=False, seed=0, fixed_class_order=None, train_transform=_default_train_transform, test_transform=_default_test_transform)

   Creates a CL scenario using the Tiny ImageNet dataset.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of steps in the current scenario.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT scenario using CIFAR10 if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT scenario using
       CIFAR10 otherwise.
       


.. function:: SplitCIFAR10(n_steps: int, first_step_with_half_classes: bool = False, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_cifar10_train_transform, test_transform=_default_cifar10_test_transform)

   Creates a CL scenario using the CIFAR10 dataset.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of steps in the current scenario.
       The value of this parameter should be a divisor of 10 if
       first_task_with_half_classes if false, a divisor of 5 otherwise.
   :param first_step_with_half_classes: A boolean value that indicates if a
       first pretraining step containing half of the classes should be used.
       If it's True, the first step will use half of the classes (5 for
       cifar100). If this parameter is False no pretraining step will be
       used, and the dataset is simply split into a the number of steps
       defined by the parameter n_steps. Default to False.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT scenario using CIFAR10 if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT scenario using
       CIFAR10 otherwise.


.. function:: _get_cifar10_dataset(train_transformation, test_transformation)


.. function:: SplitCIFAR100(n_steps: int, first_step_with_half_classes: bool = False, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_cifar100_train_transform, test_transform=_default_cifar100_test_transform)

   Creates a CL scenario using the CIFAR100 dataset.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of incremental steps in the current
       scenario. The value of this parameter should be a divisor of 100 if
       first_task_with_half_classes if false, a divisor of 50 otherwise.
   :param first_step_with_half_classes: A boolean value that indicates if a
       first pretraining batch containing half of the classes should be used.
       If it's True, a pretraining step with half of the classes (50 for
       cifar100) is used. If this parameter is False no pretraining task
       will be used, and the dataset is simply split into a the number of
       steps defined by the parameter n_steps. Default to False.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT scenario using CIFAR100 if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT scenario using
       CIFAR100 otherwise.


.. function:: SplitCIFAR110(n_steps: int, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_cifar100_train_transform, test_transform=_default_cifar100_test_transform) -> NCScenario

   Creates a Single Incremental Task (SIT) scenario using the CIFAR100 dataset,
   with a pretrain first batch using CIFAR10.
   If the datasets are not present in the computer the method automatically
   download them and store the data in the data folder.

   :param n_steps: The number of steps for the entire scenario. The first
   step will be the entire cifar10, while the other n-1 steps about
   the incremental training on cifar100.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order ONLY for the incremental part on cifar100. The classes must be in
       range 0-99.
       If None, value of ``seed`` will be used to define the class
       order for the incremental batches on cifar100.
       If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCSingleTaskScenario` instance initialized for the the
       SIT scenario using CIFAR10 as a pretrain batch zero and CIFAR100 for the
       incremental training.  


.. function:: SplitMNIST(n_steps: int, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_mnist_train_transform, test_transform=_default_mnist_test_transform)

   Creates a CL scenario using the MNIST dataset.
   This helper create the basic split MNIST scenario, where the 10 classes of
   the MNIST dataset are evenly splitted into the given nuber of tasks.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of incremental steps in the current
       scenario.
       The value of this parameter should be a divisor of 10.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT split MNIST scenario if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT split MNIST
       scenario otherwise.


.. function:: PermutedMNIST(n_steps: int, seed: Optional[int] = None, train_transform: Any = _default_mnist_train_transform, test_transform: Any = _default_mnist_test_transform) -> NCScenario

   This helper create a permuted MNIST scenario: where a given number of random
   pixel permutations is used to permute the MNIST images in
   ``n_steps`` different manners, creating an equal number of tasks.
   Each task is composed of all the original MNIST 10 classes, but the pixel
   in the images are permuted in different ways in every task.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of steps (tasks) in the current
       scenario. It indicates how many different permutations of the MNIST
       dataset have to be created.
       The value of this parameter should be a divisor of 10.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param train_transform: The transformation to apply to the training data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data
       before the random permutation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT permuted MNIST scenario.


.. function:: RotatedMNIST(n_steps: int, seed: Optional[int] = None, rotations_list: Optional[Sequence[int]] = None, train_transform=_default_mnist_train_transform, test_transform=_default_mnist_test_transform) -> NCScenario

   This helper create a rotated MNIST scenario: where a given number of random
   rotations are used to rotate the MNIST images in
   ``n_steps`` different manners, creating an equal number of tasks.
   Each task is composed of all the original MNIST 10 classes, but the images
   are rotated in different ways and using different values in every task.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of steps (tasks) in the current
       scenario. It indicates how many different rotations of the MNIST
       dataset have to be created.
       The value of this parameter should be a divisor of 10.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param rotations_list: A list of rotations values in degrees (from -180 to
       180) used to define the rotations. The rotation specified in position
       0 of the list will be applieed to the task 0, the rotation specified in
       position 1 will be applyed to task 1 and so on.
       If None, value of ``seed`` will be used to define the rotations.
       If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data
       after the random rotation, e.g. a random crop, a normalization or a
       concatenation of different transformations (see torchvision.transform
       documentation for a comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT rotated MNIST scenario.


.. function:: SplitFMNIST(n_steps: int, first_batch_with_half_classes: bool = False, return_task_id=False, seed: Optional[int] = None, fixed_class_order: Optional[Sequence[int]] = None, train_transform=_default_cifar10_train_transform, test_transform=_default_cifar10_test_transform)

   Creates a CL scenario using the Fashion MNIST dataset.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param n_steps: The number of steps in the current
       scenario. If the first step is a "pretraining" step and it contains
       half of the classes. The value of this parameter should be a divisor
       of 10 if first_task_with_half_classes if false, a divisor of 5
       otherwise.
   :param first_batch_with_half_classes: A boolean value that indicates if a
       first pretraining batch containing half of the classes should be used.
       If it's True, a pretraining batch with half of the classes (5 for
       cifar100) is used. If this parameter is False no pretraining task
       will be used, and the dataset is simply split into
       a the number of steps defined by the parameter n_steps.
       Default to False.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT scenario using CIFAR10 if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT scenario using
       CIFAR10 otherwise.


.. function:: SplitImageNet(root, n_steps=10, per_step_classes=None, return_task_id=False, seed=0, fixed_class_order=None, train_transform=_default_train_transform, test_transform=_default_test_transform)

   Creates a CL scenario using the Tiny ImageNet dataset.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param root: Base path where Imagenet data are stored.
   :param n_steps: The number of  steps in the current scenario.
   :param per_step_classes: Is not None, a dictionary whose keys are
       (0-indexed) step IDs and their values are the number of classes
       to include in the respective steps. The dictionary doesn't
       have to contain a key for each step! All the remaining steps
       will contain an equal amount of the remaining classes. The
       remaining number of classes must be divisible without remainder
       by the remaining number of steps. For instance,
       if you want to include 50 classes in the first step
       while equally distributing remaining classes across remaining
       steps, just pass the "{0: 50}" dictionary as the
       per_step_classes parameter. Defaults to None.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT scenario using CIFAR10 if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT scenario using
       CIFAR10 otherwise.
       


.. function:: SplitCUB200(root, n_steps=11, classes_first_batch=100, return_task_id=False, seed=0, fixed_class_order=None, shuffle=False, train_transform=_default_train_transform, test_transform=_default_test_transform)

   Creates a CL scenario using the Tiny ImageNet dataset.
   If the dataset is not present in the computer the method automatically
   download it and store the data in the data folder.

   :param root: Base path where Imagenet data are stored.
   :param n_steps: The number of steps in the current scenario.
   :param classes_first_batch: Number of classes in the first batch.
   Usually this is set to 500. Default to None.
   :param return_task_id: if True, for every step the task id is returned and
       the Scenario is Multi Task. This means that the scenario returned
       will be of type ``NCMultiTaskScenario``. If false the task index is
       not returned (default to 0 for every batch) and the returned scenario
       is of type ``NCSingleTaskScenario``.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param fixed_class_order: A list of class IDs used to define the class
       order. If None, value of ``seed`` will be used to define the class
       order. If non-None, ``seed`` parameter will be ignored.
       Defaults to None.
   :param shuffle: If true, the class order in the incremental steps is
       randomly shuffled. Default to false.
   :param train_transform: The transformation to apply to the training data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default train transformation
       will be used.
   :param test_transform: The transformation to apply to the test data,
       e.g. a random crop, a normalization or a concatenation of different
       transformations (see torchvision.transform documentation for a
       comprehensive list of possible transformations).
       If no transformation is passed, the default test transformation
       will be used.

   :returns: A :class:`NCMultiTaskScenario` instance initialized for the the
       MT scenario using CIFAR10 if the parameter ``return_task_id`` is True,
       a :class:`NCSingleTaskScenario` initialized for the SIT scenario using
       CIFAR10 otherwise.
       


.. py:class:: OPENLORIS_DATA(data_folder='data/')

   Bases: :class:`object`

   OpenlORIS downloader.

   Args:
       data_folder (string): folder in which to download openloris dataset.

   .. method:: download_openloris(self)
      :abstractmethod:



.. function:: create_generic_scenario_from_filelists(root: Union[str, Path], train_file_lists: Sequence[Union[str, Path]], test_file_lists: Union[Union[str, Path], Sequence[Union[str, Path]]], task_labels: Sequence[int], complete_test_set_only: bool = False, train_transform=None, train_target_transform=None, test_transform=None, test_target_transform=None) -> GenericCLScenario

   Creates a generic scenario given a list of filelists and the respective task
   labels. A separate dataset will be created for each filelist and each of
   those training datasets will be considered a separate training step.
   Contents of the datasets will not be changed, including the targets.

   In its base form, this function accepts a list of filelists for the test
   datsets that must contain the same amount of elements of the training list.
   Those pairs of datasets are then used to create the "past", "cumulative"
   (a.k.a. growing) and "future" test sets. However, in certain Continual
   Learning scenarios only the concept of "complete" test set makes sense. In
   that case, the ``complete_test_set_only`` should be set to True (see the
   parameter description for more info).

   This helper functions is the best shot when loading Caffe-style dataset
   based on filelists.

   :param root: The root path of the dataset.
   :param train_file_lists: A list of filelists describing the
       paths of the training patterns for each step.
   :param test_file_lists: A list of filelists describing the
       paths of the test patterns for each step.
   :param task_labels: A list of task labels. Must contain the same amount of
       elements of the ``train_file_lists`` parameter. For
       Single-Incremental-Task (a.k.a. Task-Free) scenarios, this is usually
       a list of zeros. For Multi Task scenario, this is usually a list of
       ascending task labels (starting from 0).
   :param complete_test_set_only: If True, only the complete test set will
       be returned by the scenario. This means that the ``test_file_lists``
       parameter must be list with a single element (the complete test set).
       Alternatively, can be a plain string or :class:`Path` object.
       Defaults to False, which means that ``train_file_lists`` and
       ``test_file_lists`` must contain the same amount of filelists paths.
   :param train_transform: The transformation to apply to training patterns.
       Defaults to None.
   :param train_target_transform: The transformation to apply to training
       patterns targets. Defaults to None.
   :param test_transform: The transformation to apply to test patterns.
       Defaults to None.
   :param test_target_transform: The transformation to apply to test
       patterns targets. Defaults to None.

   :returns: A :class:`GenericCLScenario` instance.


.. data:: nbatch
   

   

.. data:: fac2dirs
   

   

.. function:: OpenLORIS(root=expanduser('~') + '/.avalanche/data/openloris/', factor='clutter')

   OpenLORIS continual scenario generator

   :param root: Path indicating where to store the dataset and related
       metadata. By default they will be stored in
       avalanche/datasets/openloris/data/.
   :param factor: OpenLORIS main factors, indicating different environmental
       variations. It can be chosen between 'clutter', 'illumination',
       'occlusion', 'pixel', or 'mixture-iros'. The first three factors are
       included in the ICRA 2020 paper and the last factor (mixture-iros) is
       the benchmark setting for IROS 2019 Lifelong robotic vision competition.

   :returns: it returns a :class:`GenericCLScenario` instance that can be
       iterated.


.. data:: factor
   

   

