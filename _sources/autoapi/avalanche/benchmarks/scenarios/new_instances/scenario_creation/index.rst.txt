:mod:`avalanche.benchmarks.scenarios.new_instances.scenario_creation`
=====================================================================

.. py:module:: avalanche.benchmarks.scenarios.new_instances.scenario_creation


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.scenarios.new_instances.scenario_creation.create_ni_single_dataset_sit_scenario
   avalanche.benchmarks.scenarios.new_instances.scenario_creation.create_ni_multi_dataset_sit_scenario


.. function:: create_ni_single_dataset_sit_scenario(train_dataset: IDatasetWithTargets, test_dataset: IDatasetWithTargets, n_batches: int, shuffle: bool = True, seed: Optional[int] = None, balance_batches: bool = False, min_class_patterns_in_batch: int = 0, fixed_batch_assignment: Optional[Sequence[Sequence[int]]] = None, reproducibility_data: Optional[Dict[str, Any]] = None) -> NIScenario

   Creates a "New Instances - Single Incremental Task" scenario given a couple
   of train and test datasets.

   :param train_dataset: The training dataset.
   :param test_dataset: A list of test dataset.
   :param n_batches: The number of batches.
   :param shuffle: If True, patterns order will be shuffled.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param balance_batches: If True, pattern of each class will be equally
       spread across all batches. If False, patterns will be assigned to
       batches in a complete random way. Defaults to False.
   :param min_class_patterns_in_batch: The minimum amount of patterns of
       every class that must be assigned to every batch. Compatible with
       the ``balance_batches`` parameter. An exception will be raised if
       this constraint can't be satisfied. Defaults to 0.
   :param fixed_batch_assignment: If not None, the pattern assignment
       to use. It must be a list with an entry for each batch. Each entry
       is a list that contains the indexes of patterns belonging to that
       batch. Overrides the ``shuffle``, ``balance_batches`` and
       ``min_class_patterns_in_batch`` parameters.
   :param reproducibility_data: If not None, overrides all the other
       scenario definition options, including ``fixed_batch_assignment``.
       This is usually a dictionary containing data used to
       reproduce a specific experiment. One can use the scenario's
       ``get_reproducibility_data`` method to get (and even distribute)
       the experiment setup so that it can be loaded by passing it as this
       parameter. In this way one can be sure that the same specific
       experimental setup is being used (for reproducibility purposes).
       Beware that, in order to reproduce an experiment, the same train and
       test datasets must be used. Defaults to None.

   :returns: A :class:`NIScenario` instance.


.. function:: create_ni_multi_dataset_sit_scenario(train_dataset_list: Sequence[IDatasetWithTargets], test_dataset_list: Sequence[IDatasetWithTargets], n_batches: int, shuffle: bool = True, seed: Optional[int] = None, balance_batches: bool = False, min_class_patterns_in_batch: int = 0, reproducibility_data: Optional[Dict[str, Any]] = None) -> NIScenario

   Creates a "New Instances - Single Incremental Task" scenario given a list of
   datasets and the number of batches. The datasets will be merged together.

   Note: train_dataset_list and test_dataset_list must have the same number of
   datasets.

   :param train_dataset_list: A list of training datasets.
   :param test_dataset_list: A list of test datasets.
   :param n_batches: The number of batches.
   :param shuffle: If True, patterns order will be shuffled.
   :param seed: A valid int used to initialize the random number generator.
       Can be None.
   :param balance_batches: If True, pattern of each class will be equally
           spread across all batches. If False, patterns will be assigned to
           batches in a complete random way. Defaults to False.
   :param min_class_patterns_in_batch: The minimum amount of patterns of
       every class that must be assigned to every batch. Compatible with
       the ``balance_batches`` parameter. An exception will be raised if
       this constraint can't be satisfied. Defaults to 0.
   :param reproducibility_data: If not None, overrides all the other
       scenario definition options, including ``fixed_batch_assignment``.
       This is usually a dictionary containing data used to
       reproduce a specific experiment. One can use the scenario's
       ``get_reproducibility_data`` method to get (and even distribute)
       the experiment setup so that it can be loaded by passing it as this
       parameter. In this way one can be sure that the same specific
       experimental setup is being used (for reproducibility purposes).
       Beware that, in order to reproduce an experiment, the same
       train and test datasets list must be used. Defaults to None.

   :returns: A :class:`NIScenario` instance.


