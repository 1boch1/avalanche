:mod:`avalanche.benchmarks.scenarios.new_instances.ni_scenario`
===============================================================

.. py:module:: avalanche.benchmarks.scenarios.new_instances.ni_scenario


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.scenarios.new_instances.ni_scenario.NIScenario
   avalanche.benchmarks.scenarios.new_instances.ni_scenario.NIBatchInfo



.. py:class:: NIScenario(train_dataset: TrainSetWithTargets, test_dataset: TestSetWithTargets, n_batches: int, shuffle: bool = True, seed: Optional[int] = None, balance_batches: bool = False, min_class_patterns_in_batch: int = 0, fixed_batch_assignment: Optional[Sequence[Sequence[int]]] = None, reproducibility_data: Optional[Dict[str, Any]] = None)

   Bases: :class:`GenericCLScenario[TrainSetWithTargets, TestSetWithTargets]`, :class:`Generic[TrainSetWithTargets, TestSetWithTargets]`

   This class defines a "New Instance" Single Incremental Task scenario.
   Once created, an instance of this class can be iterated in order to obtain
   the batch sequence under the form of instances of :class:`NIBatchInfo`.

   Instances of this class can be created using the constructor directly.
   However, we recommend using facilities like:
   :func:`.scenario_creation.create_ni_single_dataset_sit_scenario` and
   :func:`.scenario_creation.create_ni_multi_dataset_sit_scenario`.

   Being a Single Incremental Task scenario, the task label will always be "0".
   Also, consider that every method from :class:`NIBatchInfo` used to retrieve
   parts of the test set (past, current, future, cumulative) always return the
   complete test set. That is, they behave as the getter for the complete test
   set. These methods are left for compatibility with the ones found in the
   :class:`avalanche.benchmarks.scenarios.new_classes.NCBatchInfo` scenario.

   Creates a NIScenario instance given the training and test Datasets and
   the number of batches.

   :param train_dataset: The training dataset. The dataset must contain a
       "targets" field. For instance, one can safely use the datasets from
       the torchvision package.
   :param test_dataset: The test dataset. The dataset must contain a
       "targets" field. For instance, one can safely use the datasets from
       the torchvision package.
   :param n_batches: The number of batches.
   :param shuffle: If True, the patterns order will be shuffled. Defaults
       to True.
   :param seed: If shuffle is True and seed is not None, the class order
       will be shuffled according to the seed. When None, the current
       PyTorch random number generator state will be used.
       Defaults to None.
   :param balance_batches: If True, pattern of each class will be equally
       spread across all batches. If False, patterns will be assigned to
       batches in a complete random way. Defaults to False.
   :param min_class_patterns_in_batch: The minimum amount of patterns of
       every class that must be assigned to every batch. Compatible with
       the ``balance_batches`` parameter. An exception will be raised if
       this constraint can't be satisfied. Defaults to 0.
   :param fixed_batch_assignment: If not None, the pattern assignment
       to use. It must be a list with an entry for each batch. Each entry
       is a list that contains the indexes of patterns belonging to that
       batch. Overrides the ``shuffle``, ``balance_batches`` and
       ``min_class_patterns_in_batch`` parameters.
   :param reproducibility_data: If not None, overrides all the other
       scenario definition options, including ``fixed_batch_assignment``.
       This is usually a dictionary containing data used to
       reproduce a specific experiment. One can use the
       ``get_reproducibility_data`` method to get (and even distribute)
       the experiment setup so that it can be loaded by passing it as this
       parameter. In this way one can be sure that the same specific
       experimental setup is being used (for reproducibility purposes).
       Beware that, in order to reproduce an experiment, the same train and
       test datasets must be used. Defaults to None.

   .. method:: __getitem__(self, batch_id)

      Gets a steps given its step ID.

      :param step_id: The step ID.

      :return: The step instance associated to the given step ID.


   .. method:: get_reproducibility_data(self) -> Dict[str, Any]

      Gets the data needed to reproduce this experiment.

      This data can be stored using the pickle module or some other mechanism.
      It can then be loaded by passing it as the ``reproducibility_data``
      parameter in the constructor.

      Child classes should get the reproducibility dictionary from super class
      and then merge their custom data before returning it.

      :return: A dictionary containing the data needed to reproduce the
          experiment.



.. py:class:: NIBatchInfo(scenario: NIScenario[TrainSetWithTargets, TestSetWithTargets], current_batch: int, force_train_transformations: bool = False, force_test_transformations: bool = False, are_transformations_disabled: bool = False)

   Bases: :class:`GenericStepInfo[NIScenario[TrainSetWithTargets, TestSetWithTargets]]`, :class:`Generic[TrainSetWithTargets, TestSetWithTargets]`

   Defines a "New Instances" batch. It defines methods to obtain the current,
   previous, cumulative and future training sets. The returned test
   set is always the complete one (methods used to get previous, cumulative and
   future sets simply return the complete one). It also defines fields that can
   be used to check which classes are in this, previous and
   future batches. Instances of this class are usually created when iterating
   over a :class:`NIScenario` instance.


   It keeps a reference to that :class:`NIScenario` instance, which can be
   used to retrieve additional info about the scenario.

   Creates a NCBatchInfo instance given the root scenario.
   Instances of this class are usually created automatically while
   iterating over an instance of :class:`NCSingleTaskScenario`.

   :param scenario: A reference to the NI scenario
   :param current_batch: Defines the current batch ID.
   :param force_train_transformations: If True, train transformations will
       be applied to the test set too. The ``force_test_transformations``
       parameter can't be True at the same time. Defaults to False.
   :param force_test_transformations: If True, test transformations will be
       applied to the training set too. The ``force_train_transformations``
       parameter can't be True at the same time. Defaults to False.
   :param are_transformations_disabled: If True, transformations are
       disabled. That is, patterns and targets will be returned as
       outputted by  the original training and test Datasets. Overrides
       ``force_train_transformations`` and ``force_test_transformations``.
       Defaults to False.

   .. method:: _go_to_batch(self)



