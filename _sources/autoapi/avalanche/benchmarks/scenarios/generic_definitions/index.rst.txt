:mod:`avalanche.benchmarks.scenarios.generic_definitions`
=========================================================

.. py:module:: avalanche.benchmarks.scenarios.generic_definitions


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.scenarios.generic_definitions.DatasetPart
   avalanche.benchmarks.scenarios.generic_definitions.DatasetType
   avalanche.benchmarks.scenarios.generic_definitions.IStepInfo
   avalanche.benchmarks.scenarios.generic_definitions.IScenarioStream



.. py:class:: DatasetPart

   Bases: :class:`enum.Enum`

   An enumeration defining the different dataset parts

   Create and return a new object.  See help(type) for accurate signature.

   .. attribute:: CURRENT
      :annotation: = 1

      

   .. attribute:: CUMULATIVE
      :annotation: = 2

      

   .. attribute:: OLD
      :annotation: = 3

      

   .. attribute:: FUTURE
      :annotation: = 4

      

   .. attribute:: COMPLETE
      :annotation: = 5

      


.. py:class:: DatasetType

   Bases: :class:`enum.Enum`

   An enumeration defining the different dataset types

   Create and return a new object.  See help(type) for accurate signature.

   .. attribute:: TRAIN
      :annotation: = 1

      

   .. attribute:: VALIDATION
      :annotation: = 2

      


.. data:: TrainSet
   

   

.. data:: TestSet
   

   

.. data:: TScenario
   

   

.. data:: TStepInfo
   

   

.. data:: TScenarioStream
   

   

.. py:class:: IStepInfo

   Bases: :class:`Protocol[TScenario, TScenarioStream]`

   Definition of a learning step. A learning step contains a set of patterns
   which has become available at a particular time instant. The content and
   size of a Step is defined by the specific benchmark that creates the
   IStepInfo instance.

   For instance, a step of a New Classes scenario will contain all patterns
   belonging to a subset of classes of the original training set. A step of a
   New Instance scenario will contain patterns from previously seen classes.

   Steps of  Single Incremental Task (a.k.a. task-free) scenarios are usually
   called "batches" while in Multi Task scenarios a Step is usually associated
   to a "task". Finally, in a Multi Incremental Task scenario the Step may be
   composed by patterns from different tasks.

   .. attribute:: origin_stream
      :annotation: :TScenarioStream

      A reference to the original stream from which this step was obtained.


   .. attribute:: scenario
      :annotation: :TScenario

      A reference to the scenario.


   .. attribute:: current_step
      :annotation: :int

      The current step. This is an incremental, 0-indexed, value used to
      keep track of the position of current step in the original stream.

      Beware that this value only describes the step position in the original
      stream and may be unrelated to the order in which the strategy will
      receive steps


   .. method:: dataset(self) -> TransformationDataset
      :property:

      The dataset containing the patterns available in this step.


   .. method:: task_label(self) -> int
      :property:

      The task label. This value will never have value "None". However,
      for scenarios that don't produce task labels a placeholder value like 0
      is usually set.



.. py:class:: IScenarioStream

   Bases: :class:`Protocol[TScenario, TStepInfo]`

   A scenario stream describes a sequence of incremental steps. Steps are
   described as :class:`IStepInfo` instances. They contain a set of patterns
   which has become available at a particular time instant along with any
   optional, scenario specific, metadata.

   Most scenario expose two different streams: the training stream and the test
   stream.

   .. attribute:: name
      :annotation: :str

      The name of the stream.


   .. attribute:: scenario
      :annotation: :TScenario

      A reference to the scenario this stream belongs to.


   .. method:: __getitem__(self: TScenarioStream, step_idx: Union[int, slice, Iterable[int]]) -> Union[TStepInfo, TScenarioStream]

      Gets a step given its step index (or a stream slice given the step
      order).

      :param step_idx: An int describing the step index or an iterable/slice
          object describing a slice of this stream.
      :return: The step instance associated to the given step index or
          a sliced stream instance.


   .. method:: __len__(self) -> int



