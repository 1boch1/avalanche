:mod:`avalanche.benchmarks.scenarios.new_classes.nc_scenario`
=============================================================

.. py:module:: avalanche.benchmarks.scenarios.new_classes.nc_scenario


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.scenarios.new_classes.nc_scenario.NCMultiTaskScenario
   avalanche.benchmarks.scenarios.new_classes.nc_scenario.NCTaskInfo
   avalanche.benchmarks.scenarios.new_classes.nc_scenario.NCSingleTaskScenario
   avalanche.benchmarks.scenarios.new_classes.nc_scenario.NCBatchInfo



.. py:class:: NCMultiTaskScenario(nc_generic_scenario: NCGenericScenario[TrainSetWithTargets, TestSetWithTargets], classes_ids_from_zero_in_each_task: bool = True, reproducibility_data: Optional[Dict[str, Any]] = None)

   Bases: :class:`GenericCLScenario[TrainSetWithTargets, TestSetWithTargets, 'NCTaskInfo']`, :class:`Generic[TrainSetWithTargets, TestSetWithTargets]`

   This class defines a "New Classes" multi task scenario based on a
   :class:`NCGenericScenario` instance. Once created, an instance of this
   class can be iterated in order to obtain the task sequence under
   the form of instances of :class:`NCTaskInfo`.

   Instances of this class can be created using the constructor directly.
   However, we recommend using facilities like:
   :func:`.scenario_creation.create_nc_single_dataset_sit_scenario`,
   :func:`.scenario_creation.create_nc_single_dataset_multi_task_scenario`,
   :func:`.scenario_creation.create_nc_multi_dataset_sit_scenario` and
   :func:`.scenario_creation.create_nc_multi_dataset_multi_task_scenario`.

   This class acts as a wrapper for :class:`NCGenericScenario`, adding the
   task label as the output to training/test set related functions
   (see: :class:`NCTaskInfo`).

   Creates a NC multi task scenario given a :class:`NCGenericScenario`
   instance. That instance will be used as the batches factory.

   :param nc_generic_scenario: The :class:`NCGenericScenario` instance
       used to populate this scenario.
   :param classes_ids_from_zero_in_each_task: If True, class ids will be
       mapped to range [0, n_classes) for each task. Defaults to True.
   :param reproducibility_data: If not None, overrides all the other
       scenario definition options. This is usually a dictionary containing
       data used to reproduce a specific experiment. One can use the
       ``get_reproducibility_data`` method to get (and even distribute)
       the experiment setup so that it can be loaded by passing it as this
       parameter. In this way one can be sure that the same specific
       experimental setup is being used (for reproducibility purposes).
       Beware that, in order to reproduce an experiment, the same train and
       test datasets must be used. Defaults to None.

   .. method:: get_reproducibility_data(self) -> Dict[str, Any]

      Gets the data needed to reproduce this experiment.

      This data can be stored using the pickle module or some other mechanism.
      It can then be loaded by passing it as the ``reproducibility_data``
      parameter in the constructor.

      Child classes should get the reproducibility dictionary from super class
      and then merge their custom data before returning it.

      :return: A dictionary containing the data needed to reproduce the
          experiment.


   .. method:: classes_in_task_range(self, task_start: int, task_end: Optional[int] = None) -> List[int]

      Gets a list of classes contained int the given tasks. The tasks are
      defined by range. This means that only the classes in range
      [task_start, task_end) will be included.

      :param task_start: The starting task ID
      :param task_end: The final task ID. Can be None, which means that all
          the remaining tasks will be taken.

      :returns: The classes contained in the required task range.


   .. method:: get_class_split(self, task_id)



.. py:class:: NCTaskInfo(scenario: NCMultiTaskScenario[TrainSetWithTargets, TestSetWithTargets], current_task: int, force_train_transformations: bool = False, force_test_transformations: bool = False, are_transformations_disabled: bool = False)

   Bases: :class:`GenericStepInfo[NCMultiTaskScenario[TrainSetWithTargets, TestSetWithTargets]]`, :class:`Generic[TrainSetWithTargets, TestSetWithTargets]`

   Defines a "New Classes" task. It defines methods to obtain the current,
   previous, cumulative and future training and test sets. It also defines
   fields that can be used to check which classes are in this, previous and
   future batches. Instances of this class are usually created when iterating
   over a :class:`NCMultiTaskScenario` instance.

   It keeps a reference to that :class:`NCMultiTaskScenario`
   instance, which can be used to retrieve additional info about the
   scenario.

   Creates a NCMultiDatasetTaskInfo instance given the root scenario.
   Instances of this class are usually created automatically while
   iterating over an instance of :class:`NCMultiTaskScenario`.

   :param scenario: A reference to the NC scenario
   :param current_task: The task ID
   :param force_train_transformations: If True, train transformations will
       be applied to the test set too. The ``force_test_transformations``
       parameter can't be True at the same time. Defaults to False.
   :param force_test_transformations: If True, test transformations will be
       applied to the training set too. The ``force_train_transformations``
       parameter can't be True at the same time. Defaults to False.
   :param are_transformations_disabled: If True, transformations are
       disabled. That is, patterns and targets will be returned as
       outputted by  the original training and test Datasets. Overrides
       ``force_train_transformations`` and ``force_test_transformations``.
       Defaults to False.

   .. method:: _make_subset(self, is_train: bool, step: int, **kwargs) -> MTSingleSet


   .. method:: _go_to_task(self)



.. py:class:: NCSingleTaskScenario(nc_generic_scenario: NCGenericScenario[TrainSetWithTargets, TestSetWithTargets])

   Bases: :class:`GenericCLScenario[TrainSetWithTargets, TestSetWithTargets, 'NCBatchInfo']`, :class:`Generic[TrainSetWithTargets, TestSetWithTargets]`

   This class defines a "New Classes" Single Incremental Task scenario based
   on a :class:`NCGenericScenario` instance. Once created, an instance of this
   class can be iterated in order to obtain the batch sequence under
   the form of instances of :class:`NCBatchInfo`.

   Instances of this class can be created using the constructor directly.
   However, we recommend using facilities like:
   :func:`.scenario_creation.create_nc_single_dataset_sit_scenario`,
   :func:`.scenario_creation.create_nc_single_dataset_multi_task_scenario`,
   :func:`.scenario_creation.create_nc_multi_dataset_sit_scenario` and
   :func:`.scenario_creation.create_nc_multi_dataset_multi_task_scenario`.

   This class acts as a wrapper for :class:`NCGenericScenario`, adding the
   task label (always "0") as the output to training/test set related functions
   (see: :class:`NCBatchInfo`).

   Creates a NC Single Incremental Task scenario given a
   :class:`NCGenericScenario` instance. That instance will be used as the
   batches factory.

   :param nc_generic_scenario: The :class:`NCGenericScenario` instance
       used to populate this scenario.

   .. method:: get_reproducibility_data(self) -> Dict[str, Any]

      Gets the data needed to reproduce this experiment.

      This data can be stored using the pickle module or some other mechanism.
      It can then be loaded by passing it as the ``reproducibility_data``
      parameter in the constructor.

      Child classes should get the reproducibility dictionary from super class
      and then merge their custom data before returning it.

      :return: A dictionary containing the data needed to reproduce the
          experiment.



.. py:class:: NCBatchInfo(scenario: NCSingleTaskScenario[TrainSetWithTargets, TestSetWithTargets], current_batch: int, force_train_transformations: bool = False, force_test_transformations: bool = False, are_transformations_disabled: bool = False)

   Bases: :class:`GenericStepInfo[NCMultiTaskScenario[TrainSetWithTargets, TestSetWithTargets]]`, :class:`Generic[TrainSetWithTargets, TestSetWithTargets]`

   Defines a "New Classes" batch. It defines methods to obtain the current,
   previous, cumulative and future training and test sets. It also defines
   fields that can be used to check which classes are in this, previous and
   future batches. Instances of this class are usually created when iterating
   over a :class:`NCSingleTaskScenario` instance.

   It keeps a reference to that :class:`NCSingleTaskScenario` instance,
   which can be used to retrieve additional info about the scenario.

   Creates a NCBatchInfo instance given the root scenario. 
   Instances of this class are usually created automatically while 
   iterating over an instance of :class:`NCSingleTaskScenario`.

   :param scenario: A reference to the NC scenario
   :param current_batch: The batch ID
   :param force_train_transformations: If True, train transformations will
       be applied to the test set too. The ``force_test_transformations``
       parameter can't be True at the same time. Defaults to False.
   :param force_test_transformations: If True, test transformations will be
       applied to the training set too. The ``force_train_transformations``
       parameter can't be True at the same time. Defaults to False.
   :param are_transformations_disabled: If True, transformations are
       disabled. That is, patterns and targets will be returned as
       outputted by  the original training and test Datasets. Overrides
       ``force_train_transformations`` and ``force_test_transformations``.
       Defaults to False.

   .. method:: _go_to_batch(self)



