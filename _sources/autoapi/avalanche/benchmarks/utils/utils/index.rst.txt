:mod:`avalanche.benchmarks.utils.utils`
=======================================

.. py:module:: avalanche.benchmarks.utils.utils

.. autoapi-nested-parse::

   Common benchmarks/environments utils. 



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   avalanche.benchmarks.utils.utils.tensor_as_list
   avalanche.benchmarks.utils.utils.grouped_and_ordered_indexes


.. function:: tensor_as_list(sequence) -> List


.. function:: grouped_and_ordered_indexes(targets: Sequence[int], patterns_indexes: Union[None, Sequence[int]], bucket_classes: bool = True, sort_classes: bool = False, sort_indexes: bool = False) -> Union[List[int], None]

   Given the targets list of a dataset and the patterns to include, returns the
   pattern indexes sorted according to the ``bucket_classes``,
   ``sort_classes`` and ``sort_indexes`` parameters.

   :param targets: The list of pattern targets, as a list.
   :param patterns_indexes: A list of pattern indexes to include in the set.
       If None, all patterns will be included.
   :param bucket_classes: If True, pattern indexes will be returned so that
       patterns will be grouped by class. Defaults to True.
   :param sort_classes: If both ``bucket_classes`` and ``sort_classes`` are
       True, class groups will be sorted by class index. Ignored if
       ``bucket_classes`` is False. Defaults to False.
   :param sort_indexes: If True, patterns indexes will be sorted. When
       bucketing by class, patterns will be sorted inside their buckets.
       Defaults to False.

   :returns: The list of pattern indexes sorted according to the
       ``bucket_classes``, ``sort_classes`` and ``sort_indexes`` parameters or
       None if the patterns_indexes is None and the whole dataset can be taken
       using the existing patterns order.


